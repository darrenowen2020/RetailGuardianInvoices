#pragma checksum "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Reconciliation.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c307ea89030261b667590512abdbb7d59063998b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RetailGInvoices.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using BlazorTable;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Reconciliation.razor"
using RetailGInvoices.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Reconciliation.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CompLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/Reconciliation")]
    public partial class Reconciliation : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 117 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Reconciliation.razor"
       
	private int companyId;

	private ITable<InvoiceView> Table;

	private string _reconPeriodYear;
	public string reconPeriodYear
	{
		get
		{
			return _reconPeriodYear;
		}

		set
		{
			if (_reconPeriodYear != value)
			{
				reconPeriod = Array.Find<Period>(periods, f => f.PeriodKey == value);
				_reconPeriodYear = value;
				Task tmp = getInvoiceViews(reconPeriod);
			}
		}
	}

	InvoiceView[] invoiceViews;
	InvoiceView[] invoiceViewsPaid;
	InvoiceView[] invoiceViewsUnpaid;

	Period[] periods;
	Period currentPeriod;
	Period reconPeriod;

	InvoiceView invoiceViewObj;
	Invoice invoiceObj;

	protected override async Task OnInitializedAsync()
	{
		this.companyId = AppData.CompanyId;

		periods = await Http.GetJsonAsync<Period[]>("api/Periods/Company/" + companyId);
		currentPeriod = getCurrentPeriod();
		reconPeriod = currentPeriod;

		await getInvoiceViews(currentPeriod);
	}

	private async Task getInvoiceViews(Period inPeriod)
	{
		await getPaidInvoiceViews(inPeriod);
		await getUnPaidInvoiceViews(inPeriod);
		StateHasChanged();
	}

	private async Task getPaidInvoiceViews(Period inPeriod)
	{
		invoiceViewsPaid = await Http.GetJsonAsync<InvoiceView[]>("api/InvoiceViews/Paid/true/" + inPeriod.PeriodKey + "/" + companyId);

	}

	private async Task getUnPaidInvoiceViews(Period inPeriod)
	{
		invoiceViewsUnpaid = await Http.GetJsonAsync<InvoiceView[]>("api/InvoiceViews/Paid/false/" + inPeriod.PeriodKey + "/" + companyId);
	}

	private void paidClick(InvoiceView selectedInvoiceView)
	{
		selectedInvoiceView.InvoicePaid = true;
		Task tmp = updateInvoice(selectedInvoiceView);
	}
	private void unpaidClick(InvoiceView selectedInvoiceView)
	{
		selectedInvoiceView.InvoicePaid = false;
		Task tmp = updateInvoice(selectedInvoiceView);
	}

	private async Task updateInvoice(InvoiceView invoiceView)
	{
		Invoice invoice = await Http.GetJsonAsync<Invoice>("api/Invoices/" + invoiceView.InvoiceId);
		invoice.Paid = invoiceView.InvoicePaid;
		await Http.SendJsonAsync(HttpMethod.Put, "api/Invoices/" + invoice.ID, invoice);
		await getInvoiceViews(currentPeriod);
		StateHasChanged();
	}

	private Period getCurrentPeriod()
	{
		return getPeriod(DateTime.Now);
	}

	private Period getPeriod(DateTime inDateTime)
	{
		Period period = Array.Find<Period>(periods, f => DateTime.Compare(inDateTime, f.StartDate) >= 0 && DateTime.Compare(inDateTime, f.EndDate) <= 0);
		if (period == null)
		{
			period = periods.Last();
		}
		return period;
	}

	private void closePeriod()
	{
		reconPeriod.PeriodClosed = true;
		reconPeriod.DatePeriodClosed = DateTime.Now;
		Task tmp = updatePeriod(reconPeriod);
	}

	private async Task updatePeriod(Period inPeriod)
	{
		await Http.SendJsonAsync(HttpMethod.Put, "api/Periods/" + inPeriod.PeriodKey, inPeriod);
	}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.AppData AppData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
