#pragma checksum "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Invoices.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a3eaf077440d1e95a4524f1bfef2a9b164a47425"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RetailGInvoices.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Invoices.razor"
using RetailGInvoices.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Invoices.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Invoices.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Invoices")]
    public partial class Invoices : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 191 "C:\Users\darre\source\repos\RetailGInvoices\RetailGInvoices\Pages\Invoices.razor"
       
	private bool updateFlag = false;


	private string siteSelectedName;
	private string supplierSelectedName;
	private string paymentTypeSelected;
	private string paymentTypeSelectedName;

	private int defaultSiteId;
	private string defaultSiteName;
	private int defaultSupplierId;
	private string defaultSupplierName;
	private int defaultPaymentTypeId;
	private string defaultPaymentTypeName;

	private Company[] companies;
	private Site[] sites;
	private Invoice[] invoices;
	private Supplier[] suppliers;
	private PaymentType[] paymentTypes;
	private InvoiceView[] invoiceViews;

	Company companyObj = new Company();
	Invoice invoiceObj = new Invoice();
	Site siteObj = new Site();
	Supplier supplierObj = new Supplier();
	PaymentType paymentTypeObj = new PaymentType();
	InvoiceView invoiceViewObj = new InvoiceView();

	public string _siteSelected;

	public string siteSelected
	{
		get
		{
			return _siteSelected;
		}

		set
		{
			int intSiteId;
			_siteSelected = value;
			try
			{
				intSiteId = int.Parse(_siteSelected);
			}
			catch (Exception ex)
			{
				intSiteId = 0;
			}
			Site site = Array.Find<Site>(sites, p => p.Id == intSiteId);
			siteSelectedName = site.SiteName;
		}
	}
	public string _supplierSelected;

	public string supplierSelected
	{
		get
		{
			return _supplierSelected;
		}

		set
		{
			int intSupplierId;
			_supplierSelected = value;
			try
			{
				intSupplierId = int.Parse(_supplierSelected);
			}
			catch (Exception ex)
			{
				intSupplierId = 0;
			}
			Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == intSupplierId);
			supplierSelectedName = supplier.Name;
		}
	}
	public decimal _VatAmount = 0;
	public decimal VatAmount {
		get
		{
			return _VatAmount;
		}

		set
		{
			_VatAmount = value;
		}
	}

	public decimal _GrossAmount = 0;
	public decimal GrossAmount {
		get
		{
			return _GrossAmount;
		}

		set
		{
			_GrossAmount = value;
		}
	}

	public decimal _NetAmount;
	public decimal NetAmount
	{
		get
		{
			return _NetAmount;
		}
		set
		{
			if (_VatAmount == 0)
			{
				if (_GrossAmount != value)
				{
					VatAmount = value - _GrossAmount;
				}
			}
			else
			{
				if (_GrossAmount == 0)
				{
					GrossAmount = value - _VatAmount;
				}
			}
			_NetAmount = value;
		}

	}


	private void NetAmountKeyPress()
	{
		if (GrossAmount == 0)
		{
			if (VatAmount != 0 && NetAmount != 0)
			{
				GrossAmount = NetAmount - VatAmount;
			}
		} else
		{
			NetAmount = GrossAmount + VatAmount;
		}
	}

	private void clearInputValues()
	{
		supplierSelectedName = suppliers[0].Name;
		siteSelectedName = sites[0].SiteName;
		paymentTypeSelected = paymentTypes[0].Description;
		GrossAmount = 0;
		VatAmount = 0;
		NetAmount = 0;
		invoiceObj.InvoiceReference = "";
		invoiceObj.Description = "";
	}

	protected override async Task OnInitializedAsync()
	{
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/");

		companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		sites = await Http.GetJsonAsync<Site[]>("api/Sites");
		suppliers = await Http.GetJsonAsync<Supplier[]>("api/Suppliers");
		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("api/PaymentTypes");


		defaultSiteId = sites[0].Id;
		defaultSiteName = sites[0].SiteName;
		defaultSupplierId = suppliers[0].Id;
		defaultSupplierName = suppliers[0].Name;
		defaultPaymentTypeId = paymentTypes[0].Id;
		defaultPaymentTypeName = paymentTypes[0].Description;

		invoiceObj.Date = DateTime.Today;

		siteSelected = defaultSiteId.ToString();
		siteSelectedName = defaultSiteName;
		supplierSelected = defaultSupplierId.ToString();
		supplierSelectedName = defaultSupplierName;
		paymentTypeSelected = defaultPaymentTypeId.ToString();


	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (true)
		{

		}
	}

	void AddNewInvoice()
	{
		try
		{
			invoiceObj.SiteID = int.Parse(siteSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SiteID = defaultSiteId;
		}

		try
		{
			invoiceObj.SupplierID = int.Parse(supplierSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SupplierID = defaultSupplierId;
		}

		try
		{
			invoiceObj.PaymentTypeID = int.Parse(paymentTypeSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.PaymentTypeID = defaultPaymentTypeId;
		}
		invoiceObj.GrossAmount = GrossAmount;
		invoiceObj.VATAmount = VatAmount;
		invoiceObj.NetAmount = NetAmount;
		invoiceObj.EditDate = DateTime.Now;

		Task d = PostInvoice();
		clearInputValues();
	}


	protected async Task PostInvoice()
	{
		if (updateFlag)
		{
			await Http.SendJsonAsync(HttpMethod.Put, "/api/Invoices/" + invoiceObj.ID, invoiceObj);
		}
		else
		{
			invoiceObj.CreatedDate = DateTime.Now;
			await Http.SendJsonAsync(HttpMethod.Post, "/api/Invoices/", invoiceObj);
		}
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
		this.StateHasChanged();
	}

	// Edit Method
	protected async Task EditInvoice(int InvoiceId)
	{
		invoiceObj = await Http.GetJsonAsync<Invoice>("/api/Invoices/" + InvoiceId);
		updateFlag = true;
		Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == invoiceObj.SupplierID);
		Site site = Array.Find<Site>(sites, p => p.Id == invoiceObj.SiteID);

		siteSelectedName = site.SiteName;
		supplierSelectedName = supplier.Name;
		GrossAmount = invoiceObj.GrossAmount;
		VatAmount = invoiceObj.VATAmount;
		NetAmount = invoiceObj.NetAmount;
	}



	// Delte Method
	protected async Task DeleteInvoice(int InvoiceID)
	{

		await Http.DeleteAsync("/api/Invoices/" + InvoiceID);

		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
	}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
