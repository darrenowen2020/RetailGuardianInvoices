#pragma checksum "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\Pages\Invoices.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "548652207627ac27aad3f43ec3a7f5d9a1d5be28"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RetailGInvoices.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using RetailGInvoices.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using BlazorTable;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\Pages\Invoices.razor"
using RetailGInvoices.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\Pages\Invoices.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CompLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/Invoices")]
    public partial class Invoices : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 259 "C:\Users\Darren\source\repos\RetailGuardianInvoices\RetailGInvoices\Pages\Invoices.razor"
           
			[Parameter]
			public int companyId { get; set; }

		private bool showNotes = false;
		private ITable<InvoiceModel> Table;
		private void ToggleEdit()
		{
			Table.ToggleEditMode();
		}
		private bool updateFlag = false;
		private int currentPeriod = 1;
		private string currentPeriodYear = DateTime.Today.ToString("yy");
		private string today = DateTime.Today.ToString("dd/MM/yyyy");

		private bool showInformationModal = false;
		private bool hideNewInvoiceTable = true;
		private bool disableCreateButton = true;

		private string _invoiceNotes;
		public string invoiceNotes
		{
			get
			{
				return _invoiceNotes;
			}
			set
			{
				_invoiceNotes = value;
				showNotes = false;
				Task tmp = Focus("btnAddInvoice");
			}
		}

		private int newLineAdded = 0;

		private int defaultSiteId;
		private int defaultSupplierId;
		private string defaultSiteName;
		private string defaultSupplierName;
		private int defaultPaymentTypeId;
		private string defaultPaymentTypeName;

		private Company[] companies;
		private Site[] sites;
		private Supplier[] suppliers;
		private PaymentType[] paymentTypes;
		private InvoiceView[] invoiceViews;
		private InvoiceHeading[] invoiceHeadings;
		private ViewInvoiceGroup[] viewInvoiceGroups;
		private Period[] periods;
		private ViewPeriodYears[] viewPeriodYears;
		private VatCategory[] vatCategories;
		private VatRate[] vatRates;
		private List<InvoiceModel> invoiceModels;

		Company companyObj = new Company();
		InvoiceModel newInvoiceModel;
		InvoiceModel tmpInvoiceModel;

		Site siteObj = new Site();
		Supplier supplierObj = new Supplier();
		PaymentType paymentTypeObj = new PaymentType();
		InvoiceView invoiceViewObj = new InvoiceView();
		InvoiceHeading invoiceHeadingObj = new InvoiceHeading();
		ViewPeriodYears viewPeriodYearsObj = new ViewPeriodYears();

		protected override async Task OnInitializedAsync()
		{
			companyId = AppData.CompanyId;
			tmpInvoiceModel = new InvoiceModel();

			viewPeriodYears = await Http.GetJsonAsync<ViewPeriodYears[]>("api/ViewPeriodYears");
			viewPeriodYearsSelected = int.Parse(currentPeriodYear);

			invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/Year/" + viewPeriodYearsSelected + "/" + companyId);

			companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");

			sites = await Http.GetJsonAsync<Site[]>("api/Sites/Company/" + companyId);
			if (sites.Length == 1)
			{
				siteSelected = 0;
				siteSelectedName = sites[0].SiteName;
			}

			suppliers = await Http.GetJsonAsync<Supplier[]>("api/Suppliers");
			periods = await Http.GetJsonAsync<Period[]>("api/Periods/Company/" + companyId + "/Year/" + currentPeriodYear);
			vatCategories = await GetVatCategories();
			vatRates = await GetVatRates();

			paymentTypes = await Http.GetJsonAsync<PaymentType[]>("api/PaymentTypes");
			if (paymentTypes.Length == 0)
			{
				PaymentType paymentType = new PaymentType();
				paymentType.Id = 0;
				paymentType.Description = "No Payment Types";
				paymentType.Type = "";

				paymentTypes = new PaymentType[1];
				paymentTypes[0] = paymentType;
			}

			try
			{
				defaultPaymentTypeId = Array.Find(paymentTypes, f => f.Type == "DD").Id;
			}
			catch (NullReferenceException ex)
			{
				defaultPaymentTypeId = 0;
			}
			catch (Exception ex)
			{
				defaultPaymentTypeId = 0;
			}
			await GetViewGroup(defaultPaymentTypeId);

			if (sites.Length == 0)
			{
				Site site = new Site();
				site.Id = 0;
				site.SiteName = "No Sites";
				sites = new Site[1];
				sites[0] = site;
			}

			defaultSiteId = sites[0].Id;

			if (suppliers.Length == 0)
			{
				Supplier supplier = new Supplier();
				supplier.Id = 0;
				supplier.Name = "No Suppliers";
				suppliers = new Supplier[1];
				suppliers[0] = supplier;
			}
			defaultSupplierId = suppliers[0].Id;

			defaultPaymentTypeName = paymentTypes[0].Description;

			ResetNewInvoiceModel();

			invoiceModels = await GetInvoiceModels();

			siteSelected = defaultSiteId;
			paymentTypeSelected = defaultPaymentTypeId.ToString();

			Period tmp = getCurrentPeriod();
			disableCreateButton = false;
		}

		protected override Task OnAfterRenderAsync(bool firstRender)
		{
			if (!firstRender)
			{
				if (newLineAdded != 0)
				{
					Task tmp = Focus($"desc{newLineAdded}");
					newLineAdded = 0;
				}
			}

			return base.OnAfterRenderAsync(firstRender);
		}

		private Site GetSite(int siteId)
		{
			Site site = sites.Where(f => f.Id == siteId).FirstOrDefault();
			if (site == null)
			{
				site = new Site();
			}

			return site;
		}

		private Supplier GetSupplier(int supplierId)
		{
			Supplier supplier = suppliers.Where(f => f.Id == supplierId).FirstOrDefault();
			if (supplier == null)
			{
				supplier = new Supplier();
			}

			return supplier;
		}

		private PaymentType GetPaymentType(int paymentTypeId)
		{
			PaymentType paymentType = paymentTypes.Where(f => f.Id == paymentTypeId).FirstOrDefault();

			if (paymentType == null)
			{
				paymentType = new PaymentType();
			}

			return paymentType;
		}

		private async Task<List<InvoiceModel>> GetInvoiceModels()
		{
			List<InvoiceModel> invoiceModels = new List<InvoiceModel>();

			try
			{
				List<InvoiceHead> invoiceHeads = await Http.GetJsonAsync<List<InvoiceHead>>("api/InvoiceHeads");
				foreach (InvoiceHead invoiceHead in invoiceHeads)
				{
					InvoiceModel invoiceModel = new InvoiceModel(invoiceHead);
					invoiceModel.InvoiceLines = await GetInvoiceLines(invoiceHead);

					invoiceModels.Add(invoiceModel);
					invoiceModel.TotalInvoice = GetInvoiceTotal(invoiceModel.InvoiceLines);
				}
				return invoiceModels;
			}
			catch (Exception ex)
			{
				return new List<InvoiceModel>();
			}
		}

		private async Task<List<InvoiceLine>> GetInvoiceLines(InvoiceHead invoiceHead)
		{
			try
			{
				return await Http.GetJsonAsync<List<InvoiceLine>>($"api/InvoiceLines/InvoiceHead/{invoiceHead.Id}");
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex.Message);
				return new List<InvoiceLine>();
			}
		}

		private decimal GetInvoiceTotal(List<InvoiceLine> invoiceLines)
		{
			decimal total = 0;

			foreach (InvoiceLine invoiceLine in invoiceLines)
			{
				total += invoiceLine.NetAmount;
			}

			return total;
		}

		private int GetLastLineNo(InvoiceModel invoiceModel)
		{
			int reply = 0;
			foreach (InvoiceLine invoiceLine in invoiceModel.InvoiceLines)
			{
				if (invoiceLine.LineNo > reply)
				{
					reply = invoiceLine.LineNo;
				}
			}

			return reply;
		}

		private void AddNewLine(InvoiceModel invoiceModel)
		{
			tmpInvoiceModel = invoiceModel.Clone();


			int newLineNo = GetLastLineNo(invoiceModel) + 1;
			InvoiceLine invoiceLine = new InvoiceLine(invoiceModel.invoiceHead.Id, newLineNo);

			invoiceModel.InvoiceLines.Add(invoiceLine);
			StateHasChanged();
			newLineAdded = newLineNo;
		}

		private void DeleteLine(InvoiceModel invoiceModel, InvoiceLine invoiceLine)
		{
			if (invoiceLine != null)
			{
				invoiceModel.InvoiceLines.Remove(invoiceLine);
			}
		}

		private void ToggleNewInvoiceTable()
		{
			hideNewInvoiceTable = !hideNewInvoiceTable;
			Task tmp = Focus("invoicedate");
			disableCreateButton = true;
		}

		private void ExitInvoiceModel(InvoiceModel invoiceModel)
		{
			invoiceModel = tmpInvoiceModel.Clone();
			disableCreateButton = false;
			ResetNewInvoiceModel();
			ToggleNewInvoiceTable();
		}

		private async Task SubmitInvoiceModel(InvoiceModel invoiceModel)
		{
			InvoiceHead invoiceHead;
			bool isEdit = false;

			Period invoicePeriod = GetPeriod(invoiceModel.invoiceHead.InvoiceDate);
			invoiceModel.invoiceHead.PeriodID = invoicePeriod.PeriodId;
			invoiceModel.invoiceHead.PeriodNo = invoicePeriod.PeriodKey;
			invoiceModel.invoiceHead.SiteID = siteSelected;
			invoiceModel.invoiceHead.SupplierID = supplierSelected;

			if (invoiceModel.invoiceHead.Id == 0)
			{
				invoiceHead = await PostInvoiceHead(invoiceModel.invoiceHead);
			}
			else
			{
				isEdit = true;
				UpdateInvoiceHead(invoiceModel.invoiceHead);
				invoiceModel.TotalInvoice = GetInvoiceTotal(invoiceModel.InvoiceLines);
			}

			foreach (InvoiceLine invoiceLine in invoiceModel.InvoiceLines)
			{
				if (invoiceLine.Id == 0)
				{
					invoiceLine.InvoiceID = invoiceModel.invoiceHead.Id;
					await PostInvoiceLine(invoiceLine);
				}
				else
				{
					UpdateInvoiceLine(invoiceLine);
				}
			}

			ResetNewInvoiceModel();
			ToggleNewInvoiceTable();
			disableCreateButton = false;

			if (isEdit)
			{
				this.StateHasChanged();
			}
			else
			{
				await GetInvoiceModels();
			}
		}

		private void ResetNewInvoiceModel()
		{
			newInvoiceModel = new InvoiceModel(companyId);
			newInvoiceModel.invoiceHead.SiteID = defaultSiteId;
			siteSelected = 0;
			supplierSelected = 0;
		}

		private async Task<InvoiceHead> PostInvoiceHead(InvoiceHead invoiceHead)
		{
			try
			{
				return await Http.PostJsonAsync<InvoiceHead>("api/InvoiceHeads", invoiceHead);
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex.Message);
				return new InvoiceHead();
			}
		}
		private void UpdateInvoiceHead(InvoiceHead invoiceHead)
		{
			try
			{
				string payload = JsonConvert.SerializeObject(invoiceHead);

				StringContent content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");
				HttpResponseMessage response = Http.PutAsync($"api/InvoiceHeads/{invoiceHead.Id}", content).Result;

				if (!response.IsSuccessStatusCode)
				{
					throw new Exception($"{response.StatusCode} Error updating invoice Head: id: {invoiceHead.Id}");
				}
			}
			catch (Exception ex)
			{
				throw new System.Exception(ex.Message);
			}
		}

		private async Task<InvoiceLine> PostInvoiceLine(InvoiceLine invoiceLine)
		{
			try
			{
				return await Http.PostJsonAsync<InvoiceLine>($"api/InvoiceLines", invoiceLine);
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
		}

		private void UpdateInvoiceLine(InvoiceLine invoiceLine)
		{
			try
			{
				string payload = JsonConvert.SerializeObject(invoiceLine);

				StringContent content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");
				HttpResponseMessage response = Http.PutAsync($"api/InvoiceLines/{invoiceLine.Id}", content).Result;

				if (!response.IsSuccessStatusCode)
				{
					throw new Exception($"{response.StatusCode} Error updating invoice Line: id: {invoiceLine.Id}");
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
		}

		private string GetSiteName(int siteId)
		{
			string reply;

			if (sites == null)
			{
				reply = string.Empty;
			}
			else
			{
				string siteName = sites.Where(f => f.Id == siteId).Select(g => g.SiteName).FirstOrDefault();
				if (siteName == null)
				{
					reply = string.Empty;
				}
				else
				{
					reply = siteName;
				}
			}

			return reply;
		}

		private string GetSupplierName(int supplierId)
		{
			string reply;

			if (suppliers == null)
			{
				reply = string.Empty;
			}
			else
			{
				reply = suppliers.Where(f => f.Id == supplierId).Select(g => g.Name).FirstOrDefault();
			}

			return reply;
		}

		private int GetCatVatRate(int vatCategoryId)
		{
			try
			{
				if (vatCategories == null)
				{
					return 0;
				}
				else
				{
					return vatCategories.Where(f => f.Id == vatCategoryId).Select(g => g.VatRate).FirstOrDefault();
				}
			}
			catch (Exception ex)
			{
				return 0;
			}
		}

		private Decimal CalcGross(Decimal netAmount, decimal vatAmount)
		{
			return netAmount - vatAmount;
		}

		private Decimal CalcVat(Decimal netAmount, decimal grossAmount)
		{
			return grossAmount - netAmount; ;
		}

		private Decimal CalcNet(Decimal grossAmount, decimal vatAmount)
		{
			return grossAmount + vatAmount;
		}


		public void refKeyHandler(string keyPressed)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus("paymenttype");
			}
		}

		public void vatCatKeyHandler(string keyPressed, int lineNo)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus($"totalamount{lineNo}");
			}
		}
		public void descKeyHandler(string keyPressed, int lineNo)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = FocusSelect($"totalamount{lineNo}");
			}
		}
		public void grossKeyHandler(string keyPressed, int lineNo)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus($"vatamount{lineNo}");
			}
		}
		public void vatKeyHandler(string keyPressed, int lineNo)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus($"netamount{lineNo}");
			}
		}

		public void vatBlurCalc(InvoiceLine invoiceLine)
		{
			if (invoiceLine.VATAmount == 0)
			{
				if (invoiceLine.NetAmount == 0)
				{
					invoiceLine.NetAmount = invoiceLine.GrossAmount;
				}
				else
				{
					if (invoiceLine.GrossAmount == 0)
					{
						invoiceLine.GrossAmount = invoiceLine.NetAmount;
					}
					else
					{
						if (invoiceLine.GrossAmount > invoiceLine.NetAmount)
						{
							invoiceLine.VATAmount = invoiceLine.GrossAmount - invoiceLine.NetAmount;
						}
					}
				}
			}
			else
			{
				if (invoiceLine.NetAmount == 0)
				{
					invoiceLine.NetAmount = invoiceLine.GrossAmount - invoiceLine.VATAmount;
				}
				else
				{
					if (invoiceLine.GrossAmount == 0)
					{
						invoiceLine.GrossAmount = invoiceLine.NetAmount + invoiceLine.VATAmount;
					}
					else
					{
						invoiceLine.NetAmount = invoiceLine.GrossAmount - invoiceLine.VATAmount;
					}
				}

			}
		}

		public void netKeyHandler(string keyPressed, int lineNo)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus($"addbutton");
			}
		}

		public void netBlurCalc(InvoiceLine invoiceLine)
		{

		}

		public void suppKeyHandler(string keyPressed)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus("reference");
			}
		}
		public void dateKeyHandler(string keyPressed)
		{
			string nextField = "site";

			if (keyPressed == "Enter")
			{
				if (sites.Length == 1)
				{
					nextField = "supplier";
				}
				Task tmp = Focus(nextField);
			}
		}
		public void siteKeyHandler(string keyPressed)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus("supplier");
			}
		}
		public void headingKeyHandler(string keyPressed)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus("paymentType");
			}
		}
		public void payKeyHandler(string keyPressed)
		{
			if (keyPressed == "Enter")
			{
				Task tmp = Focus("addbutton");
			}
		}
		public async Task Focus(string elementId)
		{
			await JSRuntime.InvokeVoidAsync("functionLibrary.focusElement", elementId);
		}

		public async Task FocusSelect(string elementId)
		{
			await JSRuntime.InvokeVoidAsync("functionLibrary.selectElement", elementId);
		}

		public string informationModalReply
		{
			get
			{
				return null;
			}

			set
			{
				showInformationModal = false;
			}

		}

		private int viewPeriodYearsSelected;
		private InvoiceView[] getHeading(int headingId, int paymentType)
		{
			InvoiceView[] groupInvoices;
			groupInvoices = Array.FindAll(invoiceViews, f => (f.InvoiceHeadingId == headingId) && (f.InvoicePaymentId == paymentType));

			return groupInvoices;

		}
		private int invoiceHeadingSelected;

		private string _invoiceHeadingSelectedName;
		private string invoiceHeadingSelectedName
		{
			get
			{
				return _invoiceHeadingSelectedName;
			}

			set
			{
				InvoiceHeading tempHeading = Array.Find<InvoiceHeading>(invoiceHeadings, f => f.Description == value);
				if (tempHeading != null)
				{
					invoiceHeadingSelected = tempHeading.Id;
				}
				else
				{
					InvoiceHeading invoiceHeading = new InvoiceHeading();
					invoiceHeading.Description = value;

					Task temp = addNewHeading(invoiceHeading);
				}

				_invoiceHeadingSelectedName = value;
			}
		}

		private string GetVatCatDesc(int VatCatId)
		{
			return vatCategories.Where(f => f.Id == VatCatId).Select(g => g.Category).FirstOrDefault();
		}

		private async Task addNewHeading(InvoiceHeading newHeading)
		{
			await Http.PostJsonAsync<InvoiceHeading>("/api/InvoiceHeadings", newHeading);
			invoiceHeadings = await Http.GetJsonAsync<InvoiceHeading[]>("/api/InvoiceHeadings");
			this.StateHasChanged();
		}

		private int siteSelected;
		private string paymentTypeSelected;

		private string _reconPaymentTypeSelected;
		private string reconPaymentTypeSelected
		{
			get
			{
				return _reconPaymentTypeSelected;
			}

			set
			{
				_reconPaymentTypeSelected = value;
				if (value == "ALL")
				{
					Task tmp = GetAllViewGroups();
				}
				else
				{
					Task tmp = GetViewGroup(int.Parse(value));
				}
			}
		}

		private string paymentTypeSelectedName;

		private int supplierSelected;

		private string _supplierSelectedName;
		private string supplierSelectedName
		{
			get
			{
				return _supplierSelectedName;
			}

			set
			{
				Supplier tempSupplier = Array.Find<Supplier>(suppliers, f => f.Name == value);
				if (tempSupplier != null)
				{
					supplierSelected = tempSupplier.Id;
				}
				else
				{
					Task tmp = addNewSupplier(value);
				}
				_supplierSelectedName = value;
			}
		}

		private async Task addNewSupplier(String newSupplierName)
		{
			Supplier newSupplier = new Supplier();
			newSupplier.Name = newSupplierName;
			newSupplier.Deleted = false;

			await Http.SendJsonAsync(HttpMethod.Post, "/api/Suppliers/", newSupplier);
			suppliers = await Http.GetJsonAsync<Supplier[]>("/api/Suppliers/");

			// Get the new suppliers ID to store locally
			newSupplier = Array.Find<Supplier>(suppliers, f => f.Name == newSupplierName);
			supplierSelected = newSupplier.Id;

			this.StateHasChanged();
		}

		public string _siteSelectedName;

		public string siteSelectedName
		{
			get
			{
				return _siteSelectedName;
			}

			set
			{
				_siteSelectedName = value;

				Site site = Array.Find<Site>(sites, p => p.SiteName == value);
				siteSelected = site.Id;
			}
		}

		public decimal _VatAmount = 0;
		public decimal VatAmount
		{
			get
			{
				return _VatAmount;
			}

			set
			{
				_VatAmount = value;
			}
		}

		public decimal _GrossAmount = 0;
		public decimal GrossAmount
		{
			get
			{
				return _GrossAmount;
			}

			set
			{
				_GrossAmount = value;
			}
		}

		public decimal _NetAmount = 0;
		public decimal NetAmount
		{
			get
			{
				return _NetAmount;
			}
			set
			{
				if (_VatAmount == 0)
				{
					if (_GrossAmount != value)
					{
						VatAmount = value - _GrossAmount;
					}
				}
				else
				{
					if (_GrossAmount == 0)
					{
						GrossAmount = value - _VatAmount;
					}
				}
				_NetAmount = value;
			}

		}


		private void NetAmountKeyPress()
		{
			if (GrossAmount == 0)
			{
				if (VatAmount != 0 && NetAmount != 0)
				{
					GrossAmount = NetAmount - VatAmount;
				}
			}
			else
			{
				NetAmount = GrossAmount + VatAmount;
			}
		}

		private void clearInputValues()
		{
			newInvoiceModel = new InvoiceModel();
			newInvoiceModel.invoiceHead.CompanyID = companyId;
			newInvoiceModel.invoiceHead.Reference = string.Empty;

			supplierSelectedName = suppliers[0].Name;
			siteSelectedName = sites[0].SiteName;
			paymentTypeSelected = paymentTypes[0].Description;
			invoiceHeadingSelectedName = invoiceHeadings[0].Description;
			GrossAmount = 0;
			VatAmount = 0;
			NetAmount = 0;
		}



		private async Task<VatCategory[]> GetVatCategories()
		{
			VatCategory[] vatCategories;
			try
			{
				vatCategories = await Http.GetJsonAsync<VatCategory[]>("api/VatCategories");

				return vatCategories;
			}
			catch (Exception ex)
			{
				return new VatCategory[0];
			}
		}

		private async Task<VatRate[]> GetVatRates()
		{
			VatRate[] vatRates;

			try
			{
				vatRates = await Http.GetJsonAsync<VatRate[]>("api/VatRates");
				return vatRates;
			}
			catch (Exception ex)
			{
				return new VatRate[0];
			}
		}

		private Decimal GetVatRate(int vatRateId)
		{
			Decimal vatRate = 0;
			try
			{
				vatRate = vatRates.Where(f => f.Id == vatRateId).FirstOrDefault().Rate;
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex.Message);
			}

			return vatRate;
		}



		private bool validateNewInvoice()
		{
			bool isValid = true;

			if (supplierSelectedName == null)
			{
				isValid = false;
			}

			if (GrossAmount == 0)
			{
				isValid = false;
			}

			//if (invoiceObj.Description == null)
			//{
			//	isValid = false;
			//}
			return isValid;
		}

		private Period getCurrentPeriod()
		{
			return GetPeriod(DateTime.Now);
		}

		private Period GetPeriod(DateTime? inDateTime)
		{
			Period period = Array.Find<Period>(periods, f => inDateTime >= f.StartDate && inDateTime <= f.EndDate);
			return period;
		}



		private async Task GetViewGroup(int paymentType)
		{
			viewInvoiceGroups = await Http.GetJsonAsync<ViewInvoiceGroup[]>("/api/ViewInvoiceGroups/PayType/" + paymentType + "/" + companyId);
			this.StateHasChanged();
		}

		private async Task GetAllViewGroups()
		{
			viewInvoiceGroups = await Http.GetJsonAsync<ViewInvoiceGroup[]>("/api/ViewInvoiceGroups/Company/" + companyId);
			this.StateHasChanged();
		}

		private void AddInvoiceNotes()
		{
			//invoiceNotes = invoiceObj.Notes;
			showNotes = true;
			StateHasChanged();
		}
		public void updateInvoiceNotes(string newNotes)
		{
			invoiceNotes = newNotes;
		}

		// Edit Method
		private void EditInvoice(InvoiceModel invoiceModel)
		{
			ToggleNewInvoiceTable();
			newInvoiceModel = invoiceModel;
			siteSelected = invoiceModel.invoiceHead.SiteID;
			supplierSelected = invoiceModel.invoiceHead.SupplierID;
			supplierSelectedName = GetSupplierName(supplierSelected);
			hideNewInvoiceTable = false;
		}

		// Delete Method
		protected async Task DeleteInvoice(InvoiceModel invoiceModel)
		{
			try
			{
				await Http.DeleteAsync($"api/InvoiceHeads/{invoiceModel.invoiceHead.Id}");
				await Http.DeleteAsync($"api/InvoiceLines/InvoiceHead/{invoiceModel.invoiceHead.Id}");

				invoiceModels.Remove(invoiceModel);

				StateHasChanged();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
		}

	

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.AppData AppData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
