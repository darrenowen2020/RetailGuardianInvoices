@page "/"
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http
@inject Services.AppData AppData
@inject NavigationManager NavManager
@layout CompMaintLayout

@if (companies == null)
{
	<p>Loadng Companies...</p>
}
else
{
	@if (companies.Length == 0)
	{
		<p>No Companies Have Been Configured</p>
	}
	else
	{
	<table class="table-borderless" style="width:600px">
		@foreach (var company in companies)
		{
			<tr>
				<td>@company.Name</td>
				<td>
					<button class="btn-info" @onclick="c => invoicePage(company)" disabled="@(PeriodMissing(company.Id))">Invoice</button>
				</td>
				<td>
					<button class="btn-info" @onclick="c => expensePage(company)" disabled="@(PeriodMissing(company.Id))">Expense</button>
				</td>
				@if (PeriodMissing(company.Id))
				{
					<td>
						<p class="alert-danger">No Periods Configured For Today</p>
					</td>
				}
			</tr>

		}

	</table>
		}
	}


@code
{
	Company[] companies;
	Company companyObj;
	bool showInvoices = false;
	private PeriodCount[] periodCounts;

	protected override async Task OnInitializedAsync()
	{
		companies = await Http.GetJsonAsync<Company[]>("api/Companies");
		//periodCounts = await Http.GetJsonAsync<PeriodCount[]>("api/PeriodCounts");
	}

	private void invoicePage(Company company)
	{
		AppData.CompanyId = company.Id;
		AppData.ComanyName = company.Name;
		NavManager.NavigateTo("/Invoices");

	}
	private void expensePage(Company company)
	{
		AppData.CompanyId = company.Id;
		AppData.ComanyName = company.Name;
		NavManager.NavigateTo("/Expenses");

	}

	private void companyPage()
	{
		NavManager.NavigateTo("/Companies");
	}

	private async Task<bool> companyPeriodCount(Company company)
	{
		bool result = false;

		PeriodCount periodCount = Array.Find(periodCounts, f => f.CompanyId == company.Id);
		if (periodCount != null)
		{
			result = true;
		}

		return result;
	}

	private bool PeriodMissing(int companyId)
	{
		bool missingPeriod = Task.Run(() => CompanyDoesntHavePeriodForToday(companyId)).Result;

		return missingPeriod;
	}

	private async Task<bool> CompanyDoesntHavePeriodForToday(int companyId)
	{
		bool periodExists = false;

		string todayYear = DateTime.Today.Year.ToString().Substring(2, 2);
		DateTime today = DateTime.Today;

		try
		{
			Period[] periods = await Http.GetJsonAsync<Period[]>($"api/Periods/Company/{companyId}/Year/{todayYear}");

			Period period = Array.Find<Period>(periods, f => DateTime.Compare(today, f.StartDate) >= 0 && DateTime.Compare(today, f.EndDate) <= 0);
			if (period != null)
			{
				periodExists = true;
			}
		}
		catch (Exception ex)
		{
			periodExists = false;
		}

		return !periodExists;
	}

}