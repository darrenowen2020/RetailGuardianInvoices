@page "/Reconciliation"
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http

@if (invoiceViewsPaid == null)
{
	<p>Loading the period data..</p>
}
else
{
	<!-- Paid Table -->
	<h2>Paid Invoices</h2>
	<Table TableItem="InvoiceView" Items="invoiceViewsPaid" @ref="Table" PageSize="20" ColumnReorder="true" SelectionType="SelectionType.Single">
		<Column TableItem="InvoiceView" Title="ID" Field="@(x => x.InvoiceId)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Invoice Date" Field="@(x => x.InvoiceDate)" Sortable="true" Width="10%" DefaultSortColumn="true">
			<Template>
				@(context.InvoiceDate.ToShortDateString())
			</Template>
		</Column>
		<Column TableItem="InvoiceView" Title="Site" Field="@(x => x.SiteName)" Sortable="true" Width="10%" DefaultSortColumn="true">
		</Column>
		<Column TableItem="InvoiceView" Title="Supplier" Field="@(x => x.SupplierName)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Description" Field="@(x => x.InvoiceDescription)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Heading" Field="@(x => x.InvoiceHeading)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Payment Type" Field="@(x => x.InvoicePaymentDescription)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Total" Field="@(x => x.InvoiceNet)" Format="C" Sortable="true" Width="10%" Align="Align.Right" />
		<Column TableItem="InvoiceView" Title="Total" Field="@(x => x.InvoiceNet)" Width="10%">
			<Template>
				<input type="checkbox" @onclick="c => unpaidClick(context)"/>
			</Template>	
		</Column>
		<Pager ShowPageNumber="true" ShowTotalCount="true" />
	</Table>
}

@if (invoiceViewsUnpaid == null)
{
	<p>Loading the period data..</p>
}
else
{
	<h2>Unpaid Invoices</h2>
	<Table TableItem="InvoiceView" Items="invoiceViewsUnpaid" @ref="Table" PageSize="20" ColumnReorder="true" SelectionType="SelectionType.Single">
		<Column TableItem="InvoiceView" Title="ID" Field="@(x => x.InvoiceId)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Invoice Date" Field="@(x => x.InvoiceDate)" Sortable="true" Width="10%" DefaultSortColumn="true">
			<Template>
				@(context.InvoiceDate.ToShortDateString())
			</Template>
		</Column>
		<Column TableItem="InvoiceView" Title="Site" Field="@(x => x.SiteName)" Sortable="true" Width="10%" DefaultSortColumn="true">
		</Column>
		<Column TableItem="InvoiceView" Title="Supplier" Field="@(x => x.SupplierName)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Description" Field="@(x => x.InvoiceDescription)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Heading" Field="@(x => x.InvoiceHeading)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Payment Type" Field="@(x => x.InvoicePaymentDescription)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Total" Field="@(x => x.InvoiceNet)" Format="C" Sortable="true" Width="10%" Align="Align.Right" />
		<Column TableItem="InvoiceView" Title="Paid" Field="@(x => x.InvoicePaid)" Width="10%">
			<Template>
				<input type="checkbox" @onclick="c => paidClick(context)" />
			</Template>	
		</Column>
		<Pager ShowPageNumber="true" ShowTotalCount="true" />
	</Table>
}

@code {
	private ITable<InvoiceView> Table;
	InvoiceView[] invoiceViews;
	InvoiceView[] invoiceViewsPaid;
	InvoiceView[] invoiceViewsUnpaid;

	InvoiceView invoiceViewObj;
	Invoice invoiceObj;
	bool testValue;

	protected override async Task OnInitializedAsync()
	{
		await getInvoiceViews();
	}

	private async Task getInvoiceViews()
	{
		await getPaidInvoiceViews();
		await getUnPaidInvoiceViews();
	}

	private async Task getPaidInvoiceViews()
	{
		invoiceViewsPaid = await Http.GetJsonAsync<InvoiceView[]>("api/InvoiceViews/Paid/true"); ;
	}

	private async Task getUnPaidInvoiceViews()
	{
		invoiceViewsUnpaid = await Http.GetJsonAsync<InvoiceView[]>("api/InvoiceViews/Paid/false"); ;
	}

	private void paidClick(InvoiceView selectedInvoiceView)
	{
		selectedInvoiceView.InvoicePaid = true;
		Task tmp = updateInvoice(selectedInvoiceView);
	}
	private void unpaidClick(InvoiceView selectedInvoiceView)
	{
		selectedInvoiceView.InvoicePaid = false;
		Task tmp = updateInvoice(selectedInvoiceView);
	}

	private async Task updateInvoice(InvoiceView invoiceView) {
		Invoice invoice = await Http.GetJsonAsync<Invoice>("api/Invoices/" + invoiceView.InvoiceId);
		invoice.Paid = invoiceView.InvoicePaid;
		await Http.SendJsonAsync(HttpMethod.Put, "api/Invoices/" + invoice.ID, invoice);
		await getInvoiceViews();
		StateHasChanged();
	}

}
