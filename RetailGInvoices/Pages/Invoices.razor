@page "/Invoices"
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http
@using Microsoft.Extensions.Logging


@if (showNotes)
{
	<InvoiceNotes showModal="@showNotes" @bind-notes="@invoiceNotes" />
}
@if (viewPeriodYears == null)
{
	<p>Loading ..</p>
}
else
{
	<table class="table-borderless" style="width: 500px;">
		<tr>
			<td style="width:50px;">
				<p>Period Year</p>
			</td>
			<td style="width:100px;">
				<select class="form-control" @bind="viewPeriodYearsSelected">
					@foreach (var viewPeriodYear in viewPeriodYears)
					{
						<option value="@viewPeriodYear.YearNo">@viewPeriodYear.YearNo</option>
					}

				</select>
			</td>
			<td>
			</td>
			<td>
				<p>Payment Type</p>
			</td>
			<td style="width:250px;">
				<select class="form-control" @bind="reconPaymentTypeSelected">
					<option value="ALL">All</option>
					@foreach (var paymentType in paymentTypes)
					{
						@if (paymentType.Type == "DD")
						{
							<option selected="selected" value="@paymentType.Id">@paymentType.Description</option>
						}
						else
						{
							<option value="@paymentType.Id">@paymentType.Description</option>
						}
					}

				</select>
			</td>
		</tr>
	</table>

}
@if (invoiceViews == null)
{
	<p>Loading Reconciliation Data..</p>
}
else
{
	<h1>Reconciliation Table</h1>
	<Table TableItem="ViewInvoiceGroup" Items="viewInvoiceGroups" PageSize="10" ColumnReorder="true">
		<Column TableItem="ViewInvoiceGroup" Title="Heading " Field="@(x => x.InvoiceHeading)" Sortable="true" Width="10%" />
		<Column TableItem="ViewInvoiceGroup" Title="Gross" Field="@(x => x.InvoiceGross)" Sortable="true" Width="10%" Format="C" Align="Align.Right" />
		<Column TableItem="ViewInvoiceGroup" Title="VAT" Field="@(x => x.InvoiceVAT)" Sortable="true" Width="10%" Aggregate="AggregateType.Sum" Format="C" Align="Align.Right" />
		<Column TableItem="ViewInvoiceGroup" Title="Total" Field="@(x => x.InvoiceNet)" Sortable="true" Width="10%" Aggregate="AggregateType.Sum" Format="C" Align="Align.Right" />
		<DetailTemplate TableItem="ViewInvoiceGroup">
			<Table TableItem="InvoiceView" Items="@getHeading(context.InvoiceHeadingId, context.InvoicePaymentId)" PageSize="10" ColumnReorder="true" ShowFooter="true">
				<Column TableItem="InvoiceView" Title="Site" Field="@(x => x.SiteName)" Width="10%" DefaultSortColumn="true" SetFooterValue="Totals" />
				<Column TableItem="InvoiceView" Title="Supplier" Field="@(x => x.SupplierName)" Width="10%" />
				<Column TableItem="InvoiceView" Title="Reference" Field="@(x => x.InvoiceReference)" Width="10%" DefaultSortColumn="true" />
				<Column TableItem="InvoiceView" Title="Description" Field="@(x => x.InvoiceDescription)" Width="10%" />
				<Column TableItem="InvoiceView" Title="Payment Type" Field="@(x => x.InvoicePaymentDescription)" Width="10%" DefaultSortColumn="true" />
				<Column TableItem="InvoiceView" Title="Gross" Field="@(x => x.InvoiceGross)" Format="C" Width="10%" DefaultSortColumn="true" Aggregate="AggregateType.Sum" Align="Align.Right" />
				<Column TableItem="InvoiceView" Title="Vat" Field="@(x => x.InvoiceVAT)" Format="C" Width="10%" DefaultSortColumn="true" Aggregate="AggregateType.Sum" Align="Align.Right" />
				<Column TableItem="InvoiceView" Title="Total" Field="@(x => x.InvoiceNet)" Format="C" Width="10%" Aggregate="AggregateType.Sum" Align="Align.Right" />
			</Table>
		</DetailTemplate>
		<Pager ShowPageNumber="true" ShowTotalCount="true" />
	</Table>
}

<!-- Add a new Invoice -->

<EditForm Model="@invoiceObj">
	<table class="table-borderless">
		<tr>
			<td>
				<label for="Invoice Date" class="control-label">Invoice Date</label>
			</td>
			<td>
				<label for="Site" class="control-label">Site</label>
			</td>
			<td>
				<label for="Supplier" class="control-label">Supplier</label>
			</td>
			<td>
				<label for="Reference" class="control-label">Reference</label>
			</td>
			<td>
				<label for="Description" class="control-label">Description</label>
			</td>
			<td>
				<label for="Heading" class="control-label">Heading</label>
			</td>
			<td>
				<label for="PaymentType" class="control-label">Pay Type</label>
			</td>
			<td class="amount">
				<label for="Gross Amount" class="control-label">Gross Amount</label>
			</td>
			<td class="amount">
				<label for="Vat Amount" class="control-label">VAT Amount</label>
			</td>
			<td class="amount">
				<label for="Net Amount" class="control-label">Net Amount</label>
			</td>
		</tr>
		<tr>
			<td>
				<input type="date" class="form-control" @bind="invoiceObj.Date" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="siteSelectedName" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="supplierSelectedName" />
			</td>
			<td style="width: 100px">
				<input type="text" class="form-control" @bind="invoiceObj.InvoiceReference" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.Description" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceHeadingSelectedName" style="width: 150px" />
			</td>
			<td style="width: 100px">
				@if (paymentTypes != null)
				{
					<select class="form-control" @bind="paymentTypeSelected">
						@foreach (var paymentType in paymentTypes)
						{
							@if (paymentType.Type == "DD")
							{
								<option selected="selected" value="@paymentType.Id">@paymentType.Type</option>
							}
							else
							{
								<option value="@paymentType.Id">@paymentType.Type</option>
							}
						}

					</select>
				}
			</td>
			<td>
				<input type="text" class="form-control" @bind="GrossAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="VatAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind-value="NetAmount" @onblur="@(e => NetAmountKeyPress())" />
			</td>
		</tr>
		<tr>
			<td>
			</td>

			<td style="width:200px">
				@if (sites != null)
				{
					<select class="form-control" @bind="siteSelected">
						@foreach (var site in sites)
						{
							<option value="@site.Id">@site.SiteName</option>
						}

					</select>
				}


			</td>

			<td style="width:200px">
				@if (suppliers != null)
				{
					<select class="form-control" @bind="supplierSelected">
						@foreach (var supplier in suppliers)
						{
							<option value="@supplier.Id">@supplier.Name</option>
						}

					</select>
				}
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
				@if (invoiceHeadings != null)
				{
					<select class="form-control" @bind="invoiceHeadingSelected">
						@foreach (var invoiceHeading in invoiceHeadings)
						{
							<option value="@invoiceHeading.Id">@invoiceHeading.Description</option>
						}
					</select>
				}
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
			</td>
		</tr>
		<tr>
			<td>
				<button class="btn btn-info" @onclick="@AddInvoiceNotes">Notes</button>
			</td>
			<td>
				<button type="submit" class="btn btn-info" @onclick="@AddNewInvoice">Update</button>
			</td>
		</tr>
	</table>
</EditForm>
@if (invoiceViews == null)
{
	<p><em>Loading....</em></p>
}
else
{
	<Table TableItem="InvoiceView" Items="invoiceViews" @ref="Table" PageSize="10" ColumnReorder="true" RowClickAction="EditInvoice" TableRowClass="x => x.RowClass">
		<Column TableItem="InvoiceView" Title="ID" Field="@(x => x.InvoiceId)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Invoice Date" Field="@(x => x.InvoiceDate)" Sortable="true" Width="10%" DefaultSortColumn="true">
			<Template>
				@(context.InvoiceDate.ToShortDateString())
			</Template>
		</Column>
		<Column TableItem="InvoiceView" Title="Site" Field="@(x => x.SiteName)" Sortable="true" Width="10%" DefaultSortColumn="true">
		</Column>
		<Column TableItem="InvoiceView" Title="Supplier" Field="@(x => x.SupplierName)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Reference" Field="@(x => x.InvoiceReference)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Description" Field="@(x => x.InvoiceDescription)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Heading" Field="@(x => x.InvoiceHeading)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Payment Type" Field="@(x => x.InvoicePaymentDescription)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Gross" Field="@(x => x.InvoiceGross)" Format="C" Sortable="true" Width="10%" DefaultSortColumn="true" Align="Align.Right" />
		<Column TableItem="InvoiceView" Title="Vat" Field="@(x => x.InvoiceVAT)" Format="C" Sortable="true" Width="10%" DefaultSortColumn="true" Align="Align.Right" />
		<Column TableItem="InvoiceView" Title="Total" Field="@(x => x.InvoiceNet)" Format="C" Sortable="true" Width="10%" Align="Align.Right" />
		<Pager ShowPageNumber="true" ShowTotalCount="true" />
	</Table>


}

@code {
	private bool showNotes = false;
	//private InvoiceNotes InvoiceNotesModal { get; set; }
	private ITable<InvoiceView> Table;
	private void ToggleEdit()
	{
		Table.ToggleEditMode();
	}
	private bool updateFlag = false;
	private int currentPeriod = 1;
	private string currentPeriodYear = DateTime.Today.ToString("yy");
	private string today = DateTime.Today.ToString("dd/MM/yyyy");

	private string _invoiceNotes;
	public string invoiceNotes {
		get
		{
			return _invoiceNotes;
				}
		set
		{
			_invoiceNotes = value;
			showNotes = false;
		}
	}

	private int defaultSiteId;
	private string defaultSiteName;
	private int defaultSupplierId;
	private string defaultSupplierName;
	private int defaultPaymentTypeId;
	private string defaultPaymentTypeName;

	private Company[] companies;
	private Site[] sites;
	private Supplier[] suppliers;
	private PaymentType[] paymentTypes;
	private InvoiceView[] invoiceViews;
	private InvoiceHeading[] invoiceHeadings;
	private ViewInvoiceGroup[] viewInvoiceGroups;
	private Period[] periods;
	private ViewPeriodYears[] viewPeriodYears;


	Company companyObj = new Company();
	Invoice invoiceObj = new Invoice();
	Site siteObj = new Site();
	Supplier supplierObj = new Supplier();
	PaymentType paymentTypeObj = new PaymentType();
	InvoiceView invoiceViewObj = new InvoiceView();
	InvoiceHeading invoiceHeadingObj = new InvoiceHeading();
	ViewPeriodYears viewPeriodYearsObj = new ViewPeriodYears();

	private int viewPeriodYearsSelected;
	private InvoiceView[] getHeading(int headingId, int paymentType)
	{
		InvoiceView[] groupInvoices;
		groupInvoices = Array.FindAll(invoiceViews, f => (f.InvoiceHeadingId == headingId) && (f.InvoicePaymentId == paymentType));

		return groupInvoices;

	}
	private string _invoiceHeadingSelected;
	private string invoiceHeadingSelected
	{
		get
		{
			return _invoiceHeadingSelected;
		}

		set
		{
			int intInvoiceHeadingSelected;
			try
			{
				intInvoiceHeadingSelected = int.Parse(value);
				InvoiceHeading tmpInvoiceHeading = Array.Find<InvoiceHeading>(invoiceHeadings, f => f.Id == intInvoiceHeadingSelected);
				invoiceHeadingSelectedName = tmpInvoiceHeading.Description;
				_invoiceHeadingSelected = value;
			}
			catch (Exception ex)
			{
				intInvoiceHeadingSelected = 0;
			}
		}
	}

	private string _invoiceHeadingSelectedName;
	private string invoiceHeadingSelectedName
	{
		get
		{
			return _invoiceHeadingSelectedName;
		}

		set
		{
			InvoiceHeading tempInvoiceHeading = Array.Find<InvoiceHeading>(invoiceHeadings, f => f.Description == value);
			if (tempInvoiceHeading == null)
			{
				InvoiceHeading invoiceHeading = new InvoiceHeading();
				invoiceHeading.Description = value;

				Task temp = addNewInvoiceHeading(invoiceHeading);
			}

			_invoiceHeadingSelectedName = value;
		}
	}

	private async Task addNewInvoiceHeading(InvoiceHeading newInvoiceHeading)
	{
		await Http.PostJsonAsync<InvoiceHeading>("/api/InvoiceHeadings", newInvoiceHeading);
		invoiceHeadings = await Http.GetJsonAsync<InvoiceHeading[]>("/api/InvoiceHeadings");
		this.StateHasChanged();
	}

	private string siteSelectedName;
	private string paymentTypeSelected;

	private string _reconPaymentTypeSelected;
	private string reconPaymentTypeSelected
	{
		get
		{
			return _reconPaymentTypeSelected;
		}

		set
		{
			_reconPaymentTypeSelected = value;
			if (value == "ALL")
			{
				Task tmp = GetAllViewGroups();
			}
			else
			{
				Task tmp = GetViewGroup(int.Parse(value));
			}
		}
	}

	private string paymentTypeSelectedName;

	private string _supplierSelectedName;
	private string supplierSelectedName
	{
		get
		{
			return _supplierSelectedName;
		}

		set
		{
			Supplier tempSupplier = Array.Find<Supplier>(suppliers, f => f.Name == value);
			if (tempSupplier == null)
			{
				Task tmp = addNewSupplier(value);
			}
			_supplierSelectedName = value;
		}
	}
	private async Task addNewSupplier(String newSupplierName)
	{
		Supplier newSupplier = new Supplier();
		newSupplier.Name = newSupplierName;

		await Http.SendJsonAsync(HttpMethod.Post, "/api/Suppliers/", newSupplier);
		suppliers = await Http.GetJsonAsync<Supplier[]>("/api/Suppliers/");

		// Get the new suppliers ID to store locally
		newSupplier = Array.Find<Supplier>(suppliers, f => f.Name == newSupplierName);
		_supplierSelected = newSupplier.Id.ToString();

		this.StateHasChanged();
	}

	public string _siteSelected;

	public string siteSelected
	{
		get
		{
			return _siteSelected;
		}

		set
		{
			int intSiteId;
			_siteSelected = value;
			try
			{
				intSiteId = int.Parse(_siteSelected);
			}
			catch (Exception ex)
			{
				intSiteId = 0;
			}
			Site site = Array.Find<Site>(sites, p => p.Id == intSiteId);
			siteSelectedName = site.SiteName;
		}
	}
	public string _supplierSelected;

	public string supplierSelected
	{
		get
		{
			return _supplierSelected;
		}

		set
		{
			int intSupplierId;

			try
			{
				if (value != null)
				{
					_supplierSelected = value;
					intSupplierId = int.Parse(_supplierSelected);
					Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == intSupplierId);
					supplierSelectedName = supplier.Name;
				}
			}
			catch (Exception ex)
			{
				intSupplierId = 0;
			}

		}
	}
	public decimal _VatAmount = 0;
	public decimal VatAmount
	{
		get
		{
			return _VatAmount;
		}

		set
		{
			_VatAmount = value;
		}
	}

	public decimal _GrossAmount = 0;
	public decimal GrossAmount
	{
		get
		{
			return _GrossAmount;
		}

		set
		{
			_GrossAmount = value;
		}
	}

	public decimal _NetAmount;
	public decimal NetAmount
	{
		get
		{
			return _NetAmount;
		}
		set
		{
			if (_VatAmount == 0)
			{
				if (_GrossAmount != value)
				{
					VatAmount = value - _GrossAmount;
				}
			}
			else
			{
				if (_GrossAmount == 0)
				{
					GrossAmount = value - _VatAmount;
				}
			}
			_NetAmount = value;
		}

	}


	private void NetAmountKeyPress()
	{
		if (GrossAmount == 0)
		{
			if (VatAmount != 0 && NetAmount != 0)
			{
				GrossAmount = NetAmount - VatAmount;
			}
		}
		else
		{
			NetAmount = GrossAmount + VatAmount;
		}
	}

	private void clearInputValues()
	{
		supplierSelectedName = suppliers[0].Name;
		siteSelectedName = sites[0].SiteName;
		paymentTypeSelected = paymentTypes[0].Description;
		invoiceHeadingSelectedName = invoiceHeadings[0].Description;
		GrossAmount = 0;
		VatAmount = 0;
		NetAmount = 0;
		invoiceObj.InvoiceReference = "";
		invoiceObj.Description = "";
	}

	protected override async Task OnInitializedAsync()
	{
		viewPeriodYears = await Http.GetJsonAsync<ViewPeriodYears[]>("api/ViewPeriodYears");
		viewPeriodYearsSelected = int.Parse(currentPeriodYear);

		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/Year/" + viewPeriodYearsSelected);

		companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		sites = await Http.GetJsonAsync<Site[]>("api/Sites");
		suppliers = await Http.GetJsonAsync<Supplier[]>("api/Suppliers");
		invoiceHeadings = await Http.GetJsonAsync<InvoiceHeading[]>("api/InvoiceHeadings");
		periods = await Http.GetJsonAsync<Period[]>("api/Periods/Year/" + currentPeriodYear);

		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("api/PaymentTypes");
		defaultPaymentTypeId = Array.Find(paymentTypes, f => f.Type == "DD").Id;
		await GetViewGroup(defaultPaymentTypeId);

		defaultSiteId = sites[0].Id;
		defaultSiteName = sites[0].SiteName;
		defaultSupplierId = suppliers[0].Id;
		defaultSupplierName = suppliers[0].Name;

		defaultPaymentTypeName = paymentTypes[0].Description;


		invoiceObj.Date = DateTime.Today;

		siteSelected = defaultSiteId.ToString();
		siteSelectedName = defaultSiteName;
		supplierSelected = defaultSupplierId.ToString();
		supplierSelectedName = defaultSupplierName;
		paymentTypeSelected = defaultPaymentTypeId.ToString();
		invoiceHeadingSelected = invoiceHeadings[0].Id.ToString();
		invoiceHeadingSelectedName = invoiceHeadings[0].Description;
		Period tmp = getCurrentPeriod();
	}

	void AddNewInvoice()
	{
		try
		{
			invoiceObj.SiteID = int.Parse(siteSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SiteID = defaultSiteId;
		}

		try
		{
			invoiceObj.SupplierID = int.Parse(supplierSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SupplierID = defaultSupplierId;
		}

		try
		{
			invoiceObj.PaymentTypeID = int.Parse(paymentTypeSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.PaymentTypeID = defaultPaymentTypeId;
		}

		invoiceObj.GrossAmount = GrossAmount;
		invoiceObj.VATAmount = VatAmount;
		invoiceObj.NetAmount = NetAmount;
		invoiceObj.EditDate = DateTime.Now;
		invoiceObj.Paid = true; // defaulting this to true#
		invoiceObj.Heading = int.Parse(invoiceHeadingSelected);
		invoiceObj.PeriodNo = getPeriod(invoiceObj.Date).PeriodKey;
		invoiceObj.Notes = invoiceNotes;

		Task d = PostInvoice();

	}

	private Period getCurrentPeriod()
	{
		return getPeriod(DateTime.Now);
	}

	private Period getPeriod(DateTime inDateTime)
	{
		Period period = Array.Find<Period>(periods, f => DateTime.Compare(inDateTime, f.StartDate) >= 0 && DateTime.Compare(inDateTime, f.EndDate) <= 0);
		return period;
	}

	protected async Task PostInvoice()
	{
		if (updateFlag)
		{
			await Http.SendJsonAsync(HttpMethod.Put, "/api/Invoices/" + invoiceObj.ID, invoiceObj);
		}
		else
		{
			invoiceObj.CreatedDate = DateTime.Now;
			await Http.SendJsonAsync(HttpMethod.Post, "/api/Invoices/", invoiceObj);
		}
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
		clearInputValues();
		this.StateHasChanged();

	}

	private async Task GetViewGroup(int paymentType)
	{
		viewInvoiceGroups = await Http.GetJsonAsync<ViewInvoiceGroup[]>("/api/ViewInvoiceGroups/PayType/" + paymentType);
		this.StateHasChanged();
	}

	private async Task GetAllViewGroups()
	{
		viewInvoiceGroups = await Http.GetJsonAsync<ViewInvoiceGroup[]>("/api/ViewInvoiceGroups");
		this.StateHasChanged();
	}

	private void AddInvoiceNotes()
	{
		invoiceNotes = invoiceObj.Notes;
		showNotes = true;
		StateHasChanged();
	}
	public void updateInvoiceNotes(string newNotes)
	{
		invoiceNotes = newNotes;
	}

	// Edit Method
	private void EditInvoice(InvoiceView invoiceView)
	{
		invoiceObj = new Invoice();

		invoiceObj.ID = invoiceView.InvoiceId;
		invoiceObj.InvoiceReference = invoiceView.InvoiceReference;
		invoiceObj.Description = invoiceView.InvoiceDescription;
		invoiceObj.GrossAmount = Math.Round(invoiceView.InvoiceGross, 2);
		invoiceObj.VATAmount = Math.Round(invoiceView.InvoiceVAT, 2);
		invoiceObj.NetAmount = Math.Round(invoiceView.InvoiceNet, 2);
		invoiceObj.PaymentTypeID = invoiceView.InvoicePaymentId;
		invoiceObj.SupplierID = invoiceView.InvoiceSupplierId;
		invoiceObj.SiteID = invoiceView.InvoiceSiteId;
		invoiceObj.Notes = invoiceView.InvoiceNotes;
		invoiceObj.Date = invoiceView.InvoiceDate;
		invoiceObj.CreatedDate = invoiceView.InvoiceCreatedDate;

		updateFlag = true;
		Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == invoiceObj.SupplierID);
		Site site = Array.Find<Site>(sites, p => p.Id == invoiceObj.SiteID);

		siteSelectedName = site.SiteName;
		supplierSelectedName = supplier.Name;
		GrossAmount = invoiceObj.GrossAmount;
		VatAmount = invoiceObj.VATAmount;
		NetAmount = invoiceObj.NetAmount;

		invoiceNotes = "init";
		this.StateHasChanged();
	}

	// Delete Method
	protected async Task DeleteInvoice(int InvoiceID)
	{

		await Http.DeleteAsync("/api/Invoices/" + InvoiceID);

		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
	}

}