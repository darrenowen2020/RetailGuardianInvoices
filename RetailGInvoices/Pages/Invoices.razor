@page "/Invoices"
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http
@using Microsoft.Extensions.Logging

<h3>Invoices</h3>

<EditForm Model="@invoiceObj" >
	<table class="form-group">
		<tr>
			<td>
				<label for="Invoice Date" class="control-label">Invoice Date</label>
			</td>
			<td>
				<label for="Site" class="control-label">Site</label>
			</td>
			<td>
				<label for="Supplier" class="control-label">Supplier</label>
			</td>
			<td>
				<label for="Reference" class="control-label">Reference</label>
			</td>
			<td>
				<label for="Description" class="control-label">Description</label>
			</td>
			<td>
				<label for="PaymentType" class="control-label">Pay Type</label>
			</td>
			<td class="amount">
				<label for="Gross Amount" class="control-label">Gross Amount</label>
			</td>
			<td class="amount">
				<label for="Vat Amount" class="control-label">VAT Amount</label>
			</td>
			<td class="amount">
				<label for="Net Amount" class="control-label">Net Amount</label>
			</td>
			<td>
				<label for="Paid" class="control-label">Paid</label>
			</td>
		</tr>
		<tr>
			<td>
				<input type="date" class="form-control" @bind="invoiceObj.Date" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="siteSelectedName" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="supplierSelectedName" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.InvoiceReference" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.Description" style="width: 300px" />
				<ValidationMessage For="@(() => invoiceObj.Description)" />
			</td>
			<td>
				@if (paymentTypes != null)
				{
					<select class="form-control" @bind="paymentTypeSelected">
						<option value=""></option>
						@foreach (var paymentType in paymentTypes)
						{
							<option value="@paymentType.Id">@paymentType.Description</option>
						}

					</select>
				}
			</td>
			<td>
				<input type="text" class="form-control" @bind="GrossAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="VatAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind-value="NetAmount" onkeypress="NetAmountKeyPress"/>
			</td>
			<td>
				<InputCheckbox class="form-control" @bind-Value="invoiceObj.Paid" />
			</td>
		</tr>
		<tr>
			<td>
			</td>

			<td style="width:250px">
				@if (sites != null)
				{
					<select class="form-control" @bind="siteSelected">
						<option value=""></option>
						@foreach (var site in sites)
						{
							<option value="@site.Id">@site.SiteName</option>
						}

					</select>
				}


			</td>

			<td style="width:200px">
				@if (suppliers != null)
				{
					<select class="form-control" @bind="supplierSelected">
						<option value=""></option>
						@foreach (var supplier in suppliers)
						{
							<option value="@supplier.Id">@supplier.Name</option>
						}

					</select>
				}
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
			</td>
		</tr>
		<tr>
			<td>
				<button type="submit" class="btn btn-info" @onclick="@AddNewInvoice">Update</button>
			</td>
		</tr>
	</table>
</EditForm>
@if (invoiceViews == null)
{
	<p><em>Loading....</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Date</th>
				<th>Site</th>
				<th>Supplier</th>
				<th>Reference</th>
				<th>Description</th>
				<th>Pay Type</th>
				<th>Gross</th>
				<th>VAT</th>
				<th>Net</th>
				<th>Paid</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var invoiceView in invoiceViews)
			{
			<tr>
				<td>@invoiceView.InvoiceId</td>
				<td>@invoiceView.InvoiceDate.ToShortDateString()</td>
				<td>@invoiceView.SiteName</td>
				<td>@invoiceView.SupplierName</td>
				<td>@invoiceView.InvoiceReference</td>
				<td>@invoiceView.InvoiceDescription</td>
				<td>@invoiceView.InvoicePaymentDescription</td>
				<td>@invoiceView.InvoiceGross</td>
				<td>@invoiceView.InvoiceVAT</td>
				<td>@invoiceView.InvoiceNet</td>
				<td>
					<input type="checkbox" checked="@invoiceView.InvoicePaid" disabled="disabled" />
				</td>
				<td>
					<button class="btn btn-secondary" @onclick="@(async () => await EditInvoice(invoiceView.InvoiceId))" style="width:50px;">Edit</button>
				</td>
				<td>
					<button class="btn btn-secondary" @onclick="@(async () => await DeleteInvoice(invoiceView.InvoiceId))" style="width:50px;">Del</button>
				</td>

			</tr>
			}
		</tbody>
	</table>
}

@code {
	private bool updateFlag = false;


	private string siteSelectedName;
	private string supplierSelectedName;
	private string paymentTypeSelected;
	private string paymentTypeSelectedName;

	private int defaultSiteId;
	private string defaultSiteName;
	private int defaultSupplierId;
	private string defaultSupplierName;
	private int defaultPaymentTypeId;
	private string defaultPaymentTypeName;

	private Company[] companies;
	private Site[] sites;
	private Invoice[] invoices;
	private Supplier[] suppliers;
	private PaymentType[] paymentTypes;
	private InvoiceView[] invoiceViews;

	Company companyObj = new Company();
	Invoice invoiceObj = new Invoice();
	Site siteObj = new Site();
	Supplier supplierObj = new Supplier();
	PaymentType paymentTypeObj = new PaymentType();
	InvoiceView invoiceViewObj = new InvoiceView();

	public string _siteSelected;

	public string siteSelected
	{
		get
		{
			return _siteSelected;
		}

		set
		{
			int intSiteId;
			_siteSelected = value;
			try
			{
				intSiteId = int.Parse(_siteSelected);
			}
			catch (Exception ex)
			{
				intSiteId = 0;
			}
			Site site = Array.Find<Site>(sites, p => p.Id == intSiteId);
			siteSelectedName = site.SiteName;
		}
	}
	public string _supplierSelected;

	public string supplierSelected
	{
		get
		{
			return _supplierSelected;
		}

		set
		{
			int intSupplierId;
			_supplierSelected = value;
			try
			{
				intSupplierId = int.Parse(_supplierSelected);
			}
			catch (Exception ex)
			{
				intSupplierId = 0;
			}
			Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == intSupplierId);
			supplierSelectedName = supplier.Name;
		}
	}
	public decimal _VatAmount = 0;
	public decimal VatAmount {
		get
		{
			return _VatAmount;
		}

		set
		{
			_VatAmount = value;
		}
	}

	public decimal _GrossAmount = 0;
	public decimal GrossAmount {
		get
		{
			return _GrossAmount;
		}

		set
		{
			_GrossAmount = value;
		}
	}

	public decimal _NetAmount;
	public decimal NetAmount
	{
		get
		{
			return _NetAmount;
		}
		set
		{
			if (_VatAmount == 0)
			{
				if (value != GrossAmount)
				{
					GrossAmount = value;
				}
				else
				{
					if ((_VatAmount + _GrossAmount) != value)
					{
						value = _VatAmount + _GrossAmount;
					}
				}

			}
			_NetAmount = value;
		}

	}
	

	void NetAmountKeyPress(KeyboardEventArgs args)
	{
		string c = "hello";
	}
	protected override async Task OnInitializedAsync()
	{
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/");

		companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		sites = await Http.GetJsonAsync<Site[]>("api/Sites");
		suppliers = await Http.GetJsonAsync<Supplier[]>("api/Suppliers");
		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("api/PaymentTypes");


		defaultSiteId = sites[0].Id;
		defaultSiteName = sites[0].SiteName;
		defaultSupplierId = suppliers[0].Id;
		defaultSupplierName = suppliers[0].Name;
		defaultPaymentTypeId = paymentTypes[0].Id;
		defaultPaymentTypeName = paymentTypes[0].Description;

		invoiceObj.Date = DateTime.Today;

		siteSelected = defaultSiteId.ToString();
		siteSelectedName = defaultSiteName;
		supplierSelected = defaultSupplierId.ToString();
		supplierSelectedName = defaultSupplierName;
		paymentTypeSelected = defaultPaymentTypeId.ToString();


	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (true)
		{

		}
	}

	void AddNewInvoice()
	{
		try
		{
			invoiceObj.SiteID = int.Parse(siteSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SiteID = defaultSiteId;
		}

		try
		{
			invoiceObj.SupplierID = int.Parse(supplierSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SupplierID = defaultSupplierId;
		}

		try
		{
			invoiceObj.PaymentTypeID = int.Parse(paymentTypeSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.PaymentTypeID = defaultPaymentTypeId;
		}

		Task d = PostInvoice();
		clearForm();

	}


	protected async Task PostInvoice()
	{
		if (updateFlag)
		{
			await Http.SendJsonAsync(HttpMethod.Put, "/api/Invoices/" + invoiceObj.ID, invoiceObj);
		}
		else
		{
			await Http.SendJsonAsync(HttpMethod.Post, "/api/Invoices/", invoiceObj);
		}
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
		this.StateHasChanged();
	}

	// Edit Method
	protected async Task EditInvoice(int InvoiceId)
	{
		invoiceObj = await Http.GetJsonAsync<Invoice>("/api/Invoices/" + InvoiceId);
		updateFlag = true;
		Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == invoiceObj.SupplierID);
		Site site = Array.Find<Site>(sites, p => p.Id == invoiceObj.SiteID);

		siteSelectedName = site.SiteName;
		supplierSelectedName = supplier.Name;
		GrossAmount = invoiceObj.GrossAmount;
		VatAmount = invoiceObj.VATAmount;
		NetAmount = invoiceObj.NetAmount;
	}



	// Delte Method
	protected async Task DeleteInvoice(int InvoiceID)
	{

		await Http.DeleteAsync("/api/Invoices/" + InvoiceID);

		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
	}
}