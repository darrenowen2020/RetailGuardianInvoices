@page "/Invoices"
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http
@using Microsoft.Extensions.Logging

@if (invoiceViews == null)
{ 
	<p>Loading the stuff..</p>
}
else
{

	<Table TableItem="InvoiceView" Items="invoiceViews" PageSize="10" ColumnReorder="true">
		<Column TableItem="InvoiceView" Title="ID" Field="@(x => x.InvoiceId)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Supplier" Field="@(x => x.SupplierName)" Sortable="true" Width="10%" />

	</Table>
}
<EditForm Model="@invoiceObj">
	<table class="table-bordered">
		<tr>
			<td>
				<label for="Invoice Date" class="control-label">Invoice Date</label>
			</td>
			<td>
				<label for="Site" class="control-label">Site</label>
			</td>
			<td>
				<label for="Supplier" class="control-label">Supplier</label>
			</td>
			<td>
				<label for="Reference" class="control-label">Reference</label>
			</td>
			<td>
				<label for="Description" class="control-label">Description</label>
			</td>
			<td>
				<label for="PaymentType" class="control-label">Pay Type</label>
			</td>
			<td class="amount">
				<label for="Gross Amount" class="control-label">Gross Amount</label>
			</td>
			<td class="amount">
				<label for="Vat Amount" class="control-label">VAT Amount</label>
			</td>
			<td class="amount">
				<label for="Net Amount" class="control-label">Net Amount</label>
			</td>
		</tr>
		<tr>
			<td>
				<input type="date" class="form-control" @bind="invoiceObj.Date" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="siteSelectedName" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="supplierSelectedName" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.InvoiceReference" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceHeadingSelectedName" style="width: 300px" />
			</td>
			<td>
				@if (paymentTypes != null)
				{
					<select class="form-control" @bind="paymentTypeSelected">
						<option value=""></option>
						@foreach (var paymentType in paymentTypes)
						{
							<option value="@paymentType.Id">@paymentType.Description</option>
						}

					</select>
				}
			</td>
			<td>
				<input type="text" class="form-control" @bind="GrossAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="VatAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind-value="NetAmount" @onblur="@(e => NetAmountKeyPress())" />
			</td>
		</tr>
		<tr>
			<td>
			</td>

			<td style="width:250px">
				@if (sites != null)
				{
					<select class="form-control" @bind="siteSelected">
						<option value=""></option>
						@foreach (var site in sites)
						{
							<option value="@site.Id">@site.SiteName</option>
						}

					</select>
				}


			</td>

			<td style="width:200px">
				@if (suppliers != null)
				{
					<select class="form-control" @bind="supplierSelected">
						@foreach (var supplier in suppliers)
						{
							<option value="@supplier.Id">@supplier.Name</option>
						}

					</select>
				}
			</td>
			<td>
			</td>
			<td>
				@if (invoiceHeadings != null)
				{
					<select class="form-control" @bind="invoiceHeadingSelected">
						@foreach (var invoiceHeading in invoiceHeadings)
						{
							<option value="@invoiceHeading.Id">@invoiceHeading.Description</option>
						}
					</select>
				}
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
			</td>
			<td>
			</td>
		</tr>
		<tr>
			<td>
				<button type="submit" class="btn btn-info" @onclick="@AddNewInvoice">Update</button>
			</td>
		</tr>
	</table>
</EditForm>
@if (invoiceViews == null)
{
	<p><em>Loading....</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Date</th>
				<th>Site</th>
				<th>Supplier</th>
				<th>Reference</th>
				<th>Description</th>
				<th>Pay Type</th>
				<th>Gross</th>
				<th>VAT</th>
				<th>Net</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var invoiceView in invoiceViews)
			{
				<tr>
					<td>@invoiceView.InvoiceId</td>
					<td>@invoiceView.InvoiceDate.ToShortDateString()</td>
					<td>@invoiceView.SiteName</td>
					<td>@invoiceView.SupplierName</td>
					<td>@invoiceView.InvoiceReference</td>
					<td>@invoiceView.InvoiceDescription</td>
					<td>@invoiceView.InvoicePaymentDescription</td>
					<td>@invoiceView.InvoiceGross</td>
					<td>@invoiceView.InvoiceVAT</td>
					<td>@invoiceView.InvoiceNet</td>
					<td>
						<button class="btn btn-secondary" @onclick="@(async () => await EditInvoice(invoiceView.InvoiceId))" style="width:50px;">Edit</button>
					</td>
					<td>
						<button class="btn btn-secondary" @onclick="@(async () => await DeleteInvoice(invoiceView.InvoiceId))" style="width:50px;">Del</button>
					</td>

				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	private bool updateFlag = false;

	private int defaultSiteId;
	private string defaultSiteName;
	private int defaultSupplierId;
	private string defaultSupplierName;
	private int defaultPaymentTypeId;
	private string defaultPaymentTypeName;

	private Company[] companies;
	private Site[] sites;
	private Invoice[] invoices;
	private Supplier[] suppliers;
	private PaymentType[] paymentTypes;
	private InvoiceView[] invoiceViews;
	private InvoiceHeading[] invoiceHeadings;

	Company companyObj = new Company();
	Invoice invoiceObj = new Invoice();
	Site siteObj = new Site();
	Supplier supplierObj = new Supplier();
	PaymentType paymentTypeObj = new PaymentType();
	InvoiceView invoiceViewObj = new InvoiceView();
	InvoiceHeading invoiceHeadingObj = new InvoiceHeading();

	private string _invoiceHeadingSelected;
	private string invoiceHeadingSelected
	{
		get
		{
			return _invoiceHeadingSelected;
		}

		set
		{
			int intInvoiceHeadingSelected;
			try
			{
				intInvoiceHeadingSelected = int.Parse(value);
				InvoiceHeading tmpInvoiceHeading = Array.Find<InvoiceHeading>(invoiceHeadings, f => f.Id == intInvoiceHeadingSelected);
				invoiceHeadingSelectedName = tmpInvoiceHeading.Description;
				_invoiceHeadingSelected = value;
			}
			catch (Exception ex)
			{
				intInvoiceHeadingSelected = 0;
			}
		}
	}

	private string _invoiceHeadingSelectedName;
	private string invoiceHeadingSelectedName
	{
		get
		{
			return _invoiceHeadingSelectedName;
		}

		set
		{
			InvoiceHeading tempInvoiceHeading = Array.Find<InvoiceHeading>(invoiceHeadings, f => f.Description == value);
			if (tempInvoiceHeading == null)
			{
				InvoiceHeading invoiceHeading = new InvoiceHeading();
				invoiceHeading.Description = value;

				Task temp = addNewInvoiceHeading(invoiceHeading);
			}

			_invoiceHeadingSelectedName = value;
		}
	}

	private async Task addNewInvoiceHeading(InvoiceHeading newInvoiceHeading)
	{
		await Http.PostJsonAsync<InvoiceHeading>("/api/InvoiceHeadings", newInvoiceHeading);
		invoiceHeadings = await Http.GetJsonAsync<InvoiceHeading[]>("/api/InvoiceHeadings");
		this.StateHasChanged();
	}

	private string siteSelectedName;
	private string paymentTypeSelected;
	private string paymentTypeSelectedName;

	private string _supplierSelectedName;
	private string supplierSelectedName
	{
		get
		{
			return _supplierSelectedName;
		}

		set
		{
			Supplier tempSupplier = Array.Find<Supplier>(suppliers, f => f.Name == value);
			if (tempSupplier == null)
			{
				Task tmp = addNewSupplier(value);
			}
			_supplierSelectedName = value;
		}
	}
	private async Task addNewSupplier(String newSupplierName)
	{
		Supplier newSupplier = new Supplier();
		newSupplier.Name = newSupplierName;

		await Http.SendJsonAsync(HttpMethod.Post, "/api/Suppliers/", newSupplier);
		suppliers = await Http.GetJsonAsync<Supplier[]>("/api/Suppliers/");

		// Get the new suppliers ID to store locally
		newSupplier = Array.Find<Supplier>(suppliers, f => f.Name == newSupplierName);
		_supplierSelected = newSupplier.Id.ToString();

		this.StateHasChanged();
	}



	public string _siteSelected;

	public string siteSelected
	{
		get
		{
			return _siteSelected;
		}

		set
		{
			int intSiteId;
			_siteSelected = value;
			try
			{
				intSiteId = int.Parse(_siteSelected);
			}
			catch (Exception ex)
			{
				intSiteId = 0;
			}
			Site site = Array.Find<Site>(sites, p => p.Id == intSiteId);
			siteSelectedName = site.SiteName;
		}
	}
	public string _supplierSelected;

	public string supplierSelected
	{
		get
		{
			return _supplierSelected;
		}

		set
		{
			int intSupplierId;

			try
			{
				if (value != null)
				{
					_supplierSelected = value;
					intSupplierId = int.Parse(_supplierSelected);
					Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == intSupplierId);
					supplierSelectedName = supplier.Name;
				}
			}
			catch (Exception ex)
			{
				intSupplierId = 0;
			}

		}
	}
	public decimal _VatAmount = 0;
	public decimal VatAmount
	{
		get
		{
			return _VatAmount;
		}

		set
		{
			_VatAmount = value;
		}
	}

	public decimal _GrossAmount = 0;
	public decimal GrossAmount
	{
		get
		{
			return _GrossAmount;
		}

		set
		{
			_GrossAmount = value;
		}
	}

	public decimal _NetAmount;
	public decimal NetAmount
	{
		get
		{
			return _NetAmount;
		}
		set
		{
			if (_VatAmount == 0)
			{
				if (_GrossAmount != value)
				{
					VatAmount = value - _GrossAmount;
				}
			}
			else
			{
				if (_GrossAmount == 0)
				{
					GrossAmount = value - _VatAmount;
				}
			}
			_NetAmount = value;
		}

	}


	private void NetAmountKeyPress()
	{
		if (GrossAmount == 0)
		{
			if (VatAmount != 0 && NetAmount != 0)
			{
				GrossAmount = NetAmount - VatAmount;
			}
		}
		else
		{
			NetAmount = GrossAmount + VatAmount;
		}
	}

	private void clearInputValues()
	{
		supplierSelectedName = suppliers[0].Name;
		siteSelectedName = sites[0].SiteName;
		paymentTypeSelected = paymentTypes[0].Description;
		GrossAmount = 0;
		VatAmount = 0;
		NetAmount = 0;
		invoiceObj.InvoiceReference = "";
		invoiceObj.Description = "";
	}

	protected override async Task OnInitializedAsync()
	{
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/");

		companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		sites = await Http.GetJsonAsync<Site[]>("api/Sites");
		suppliers = await Http.GetJsonAsync<Supplier[]>("api/Suppliers");
		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("api/PaymentTypes");
		invoiceHeadings = await Http.GetJsonAsync<InvoiceHeading[]>("api/InvoiceHeadings");

		defaultSiteId = sites[0].Id;
		defaultSiteName = sites[0].SiteName;
		defaultSupplierId = suppliers[0].Id;
		defaultSupplierName = suppliers[0].Name;
		defaultPaymentTypeId = paymentTypes[0].Id;
		defaultPaymentTypeName = paymentTypes[0].Description;


		invoiceObj.Date = DateTime.Today;

		siteSelected = defaultSiteId.ToString();
		siteSelectedName = defaultSiteName;
		supplierSelected = defaultSupplierId.ToString();
		supplierSelectedName = defaultSupplierName;
		paymentTypeSelected = defaultPaymentTypeId.ToString();
		invoiceHeadingSelected = invoiceHeadings[0].ToString();
		invoiceHeadingSelectedName = invoiceHeadings[0].Description;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (true)
		{

		}
	}

	void AddNewInvoice()
	{
		try
		{
			invoiceObj.SiteID = int.Parse(siteSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SiteID = defaultSiteId;
		}

		try
		{
			invoiceObj.SupplierID = int.Parse(supplierSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SupplierID = defaultSupplierId;
		}

		try
		{
			invoiceObj.PaymentTypeID = int.Parse(paymentTypeSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.PaymentTypeID = defaultPaymentTypeId;
		}
		invoiceObj.GrossAmount = GrossAmount;
		invoiceObj.VATAmount = VatAmount;
		invoiceObj.NetAmount = NetAmount;
		invoiceObj.EditDate = DateTime.Now;
		invoiceObj.Paid = true; // defaulting this to true

		Task d = PostInvoice();
		clearInputValues();
	}


	protected async Task PostInvoice()
	{
		if (updateFlag)
		{
			await Http.SendJsonAsync(HttpMethod.Put, "/api/Invoices/" + invoiceObj.ID, invoiceObj);
		}
		else
		{
			invoiceObj.CreatedDate = DateTime.Now;
			await Http.SendJsonAsync(HttpMethod.Post, "/api/Invoices/", invoiceObj);
		}
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
		this.StateHasChanged();
	}

	// Edit Method
	protected async Task EditInvoice(int InvoiceId)
	{
		invoiceObj = await Http.GetJsonAsync<Invoice>("/api/Invoices/" + InvoiceId);
		updateFlag = true;
		Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == invoiceObj.SupplierID);
		Site site = Array.Find<Site>(sites, p => p.Id == invoiceObj.SiteID);

		siteSelectedName = site.SiteName;
		supplierSelectedName = supplier.Name;
		GrossAmount = invoiceObj.GrossAmount;
		VatAmount = invoiceObj.VATAmount;
		NetAmount = invoiceObj.NetAmount;
	}



	// Delte Method
	protected async Task DeleteInvoice(int InvoiceID)
	{

		await Http.DeleteAsync("/api/Invoices/" + InvoiceID);

		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews");
	}
}