@page "/Invoices"
@layout CompLayout
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http
@inject Services.AppData AppData
@inject IJSRuntime JSRuntime

@if (showInformationModal)
{

	<InformationModal showModal="showInformationModal" modalTextHeader="Error" modalTextBody="Cannot Add Invoice Missing Mandatory Fields" @bind-reply="informationModalReply" />
}
@if (showNotes)
{
	<InvoiceNotes showModal="@showNotes" @bind-notes="invoiceNotes" />
}
@if (viewPeriodYears == null)
{
	<p>Loading ..</p>
}
else
{
	<table class="table-borderless" style="width: 500px;">
		<tr>
			<td style="width:50px;">
				<p>Period Year</p>
			</td>
			<td style="width:100px;">
				<select class="form-control" @bind="viewPeriodYearsSelected">
					@foreach (var viewPeriodYear in viewPeriodYears)
					{
						<option value="@viewPeriodYear.YearNo">@viewPeriodYear.YearNo</option>
					}

				</select>
			</td>
			<td>
			</td>
			<td>
				<p>Payment Type</p>
			</td>
			<td style="width:250px;">
				<select class="form-control" @bind="reconPaymentTypeSelected">
					<option value="ALL">All</option>
					@foreach (var paymentType in paymentTypes)
					{
						@if (paymentType.Type == "DD")
						{
							<option selected="selected" value="@paymentType.Id">@paymentType.Description</option>
						}
						else
						{
							<option value="@paymentType.Id">@paymentType.Description</option>
						}
					}

				</select>
			</td>
		</tr>
	</table>

}
@if (invoiceViews == null)
{
	<p>Loading Reconciliation Data..</p>
}
else
{
	<h2>Summary Table</h2>
	<Table TableItem="ViewInvoiceGroup" Items="viewInvoiceGroups" PageSize="50" ColumnReorder="true">
		<Column TableItem="ViewInvoiceGroup" Title="Heading " Field="@(x => x.InvoiceHeading)" Sortable="true" Width="10%" />
		<Column TableItem="ViewInvoiceGroup" Title="Gross" Field="@(x => x.InvoiceGross)" Sortable="true" Width="10%" Format="£###.00" Align="Align.Right" />
		<Column TableItem="ViewInvoiceGroup" Title="VAT" Field="@(x => x.InvoiceVAT)" Sortable="true" Width="10%" Aggregate="AggregateType.Sum" Format="£###.00" Align="Align.Right" />
		<Column TableItem="ViewInvoiceGroup" Title="Total" Field="@(x => x.InvoiceNet)" Sortable="true" Width="10%" Aggregate="AggregateType.Sum" Format="£###.00" Align="Align.Right" />
		<DetailTemplate TableItem="ViewInvoiceGroup">
			<Table TableItem="InvoiceView" Items="@getHeading(context.InvoiceHeadingId, context.InvoicePaymentId)" PageSize="10" ColumnReorder="true" ShowFooter="true">
				<Column TableItem="InvoiceView" Title="Site" Field="@(x => x.SiteName)" Width="10%" DefaultSortColumn="true" SetFooterValue="Totals" />
				<Column TableItem="InvoiceView" Title="Supplier" Field="@(x => x.SupplierName)" Width="10%" />
				<Column TableItem="InvoiceView" Title="Reference" Field="@(x => x.InvoiceReference)" Width="10%" DefaultSortColumn="true" />
				<Column TableItem="InvoiceView" Title="Description" Field="@(x => x.InvoiceDescription)" Width="10%" />
				<Column TableItem="InvoiceView" Title="Payment Type" Field="@(x => x.InvoicePaymentDescription)" Width="10%" DefaultSortColumn="true" />
				<Column TableItem="InvoiceView" Title="Gross" Field="@(x => x.InvoiceGross)" Format="£###.00" Width="10%" DefaultSortColumn="true" Aggregate="AggregateType.Sum" Align="Align.Right" />
				<Column TableItem="InvoiceView" Title="Vat" Field="@(x => x.InvoiceVAT)" Format="£###.00" Width="10%" DefaultSortColumn="true" Aggregate="AggregateType.Sum" Align="Align.Right" />
				<Column TableItem="InvoiceView" Title="Total" Field="@(x => x.InvoiceNet)" Format="£###.00" Width="10%" Aggregate="AggregateType.Sum" Align="Align.Right" />
			</Table>
		</DetailTemplate>
		<EmptyDataTemplate>
			<div class="text-center">
				No Summary Information
			</div>
		</EmptyDataTemplate>
		<Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
	</Table>
}

<!-- Add a new Invoice -->


<table class="table-borderless">
	<tr>
		<td>
			<label for="Invoice Date" class="control-label">*Invoice Date</label>
		</td>
		<td>
			<label for="Site" class="control-label">*Site</label>
		</td>
		<td>
			<label for="Supplier" class="control-label">*Supplier</label>
		</td>
		<td>
			<label for="Reference" class="control-label">Reference</label>
		</td>
		<td>
			<label for="Description" class="control-label">*Description</label>
		</td>
		<td>
			<label for="Heading" class="control-label">*Heading</label>
		</td>
		<td>
			<label for="PaymentType" class="control-label">*Pay Type</label>
		</td>
		<td class="amount">
			<label for="Gross Amount" class="control-label">*Gross Amount</label>
		</td>
		<td class="amount">
			<label for="Vat Amount" class="control-label">VAT Amount</label>
		</td>
		<td class="amount">
			<label for="Net Amount" class="control-label">*Net Amount</label>
		</td>
	</tr>
	<tr>
		<td>
			<input id="date" type="date" class="form-control" @bind="invoiceObj.Date" @onkeypress="@(e => dateKeyHandler(e.Key))" />
		</td>


		<td style="width:200px">
			@if (sites != null)
			{
				<select id="site" class="form-control" @bind="siteSelected" @onkeypress="@(e => siteKeyHandler(e.Key))">
					@foreach (var site in sites)
					{
						<option value="@site.Id">@site.SiteName</option>
					}

				</select>
			}
		</td>
		<td style="width:200px">
			<input id="supplier" list="supplierList" @bind="supplierSelectedName" @onkeypress="@(e => suppKeyHandler(e.Key))">
			@if (suppliers != null)
			{
				<datalist id="supplierList">
					@foreach (var supplier in suppliers)
					{
						<option value="@supplier.Name"></option>
					}
				</datalist>
			}
		</td>
		<td style="width: 100px">
			<input id="reference" type="text" class="form-control" @bind="invoiceObj.InvoiceReference" @onkeypress="@(e => refKeyHandler(e.Key))" />
		</td>
		<td>
			<input id="description" type="text" class="form-control" @bind="invoiceObj.Description" @onkeypress="@(e => descKeyHandler(e.Key))" />
		</td>
		<td style="width:200px">
			<input id="heading" list="HeadingList" @bind="invoiceHeadingSelectedName" @onkeypress="@(e => headingKeyHandler(e.Key))">
			@if (invoiceHeadings != null)
			{
				<datalist id="HeadingList">
					@foreach (var invoiceHeading in invoiceHeadings)
					{
						<option value="@invoiceHeading.Description"></option>
					}

				</datalist>
			}
		</td>

		<td style="width: 100px">
			@if (paymentTypes != null)
			{
				<select id="paymentType" class="form-control" @bind="paymentTypeSelected" @onkeypress="@(e => payKeyHandler(e.Key))">
					@foreach (var paymentType in paymentTypes)
					{
						@if (paymentType.Type == "DD")
						{
							<option selected="selected" value="@paymentType.Id">@paymentType.Type</option>
						}
						else
						{
							<option value="@paymentType.Id">@paymentType.Type</option>
						}
					}

				</select>
			}
		</td>
		<td>
			<input id="grossAmount" type="text" class="form-control" style="text-align:right" @bind="GrossAmount" @onkeypress="@(e => grossKeyHandler(e.Key))" onfocus="this.select()" />
		</td>
		<td>
			<input id="vatAmount" type="text" class="form-control" style="text-align:right" @bind="VatAmount" @onkeypress="@(e => vatKeyHandler(e.Key))" onfocus="this.select()" />
		</td>
		<td>
			<input id="netAmount" type="text" class="form-control" style="text-align:right" @bind-value="NetAmount" @onkeypress="@(e => netKeyHandler(e.Key))" @onblur="@(e => NetAmountKeyPress())" onfocus="this.select()" />
		</td>
	</tr>
	<tr>
		<td>
			<button class="btn btn-info" @onclick="@AddInvoiceNotes">Notes</button>
		</td>
		<td>
			<button id="btnAddInvoice" type="button" class="btn-success" @onclick="@AddNewInvoice">Update</button>
		</td>
		<td>
			<button type="button" class="btn-secondary" @onclick="@clearInputValues">Clear</button>
		</td>
	</tr>
	<tr>
		<td>
			<p>* - Manditory Field</p>
		</td>
	</tr>
</table>
@if (invoiceViews == null)
{
	<p><em>Loading....</em></p>
}
else
{
	<Table TableItem="InvoiceView" Items="invoiceViews" @ref="Table" PageSize="50" ColumnReorder="true" RowClickAction="EditInvoice" TableRowClass="x => x.RowClass">
		<Column TableItem="InvoiceView" Title="ID" Field="@(x => x.InvoiceId)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Invoice Date" Field="@(x => x.InvoiceDate)" Sortable="true" Width="10%" DefaultSortColumn="true">
			<Template>
				@(context.InvoiceDate.ToShortDateString())
			</Template>
		</Column>
		<Column TableItem="InvoiceView" Title="Site" Field="@(x => x.SiteName)" Sortable="true" Width="10%" DefaultSortColumn="true">
		</Column>
		<Column TableItem="InvoiceView" Title="Supplier" Field="@(x => x.SupplierName)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Reference" Field="@(x => x.InvoiceReference)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Description" Field="@(x => x.InvoiceDescription)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Heading" Field="@(x => x.InvoiceHeading)" Sortable="true" Width="10%" />
		<Column TableItem="InvoiceView" Title="Payment Type" Field="@(x => x.InvoicePaymentDescription)" Sortable="true" Width="10%" DefaultSortColumn="true" />
		<Column TableItem="InvoiceView" Title="Gross" Field="@(x => x.InvoiceGross)" Format="£###.00" Sortable="true" Width="10%" DefaultSortColumn="true" Align="Align.Right" />
		<Column TableItem="InvoiceView" Title="Vat" Field="@(x => x.InvoiceVAT)" Format="£###.00" Sortable="true" Width="10%" DefaultSortColumn="true" Align="Align.Right" />
		<Column TableItem="InvoiceView" Title="Total" Field="@(x => x.InvoiceNet)" Format="£###.00" Sortable="true" Width="10%" Align="Align.Right" />
		<Column TableItem="InvoiceView" Title="Del">
			<Template>
				<button class="btn-sm" @onclick="c => DeleteInvoice(context) ">X</button>
			</Template>
		</Column>
		<Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
	</Table>


}

@code {
	[Parameter]
	public int companyId { get; set; }

	private bool showNotes = false;
	private ITable<InvoiceView> Table;
	private void ToggleEdit()
	{
		Table.ToggleEditMode();
	}
	private bool updateFlag = false;
	private int currentPeriod = 1;
	private string currentPeriodYear = DateTime.Today.ToString("yy");
	private string today = DateTime.Today.ToString("dd/MM/yyyy");

	private bool showInformationModal = false;
	private string _invoiceNotes;
	public string invoiceNotes
	{
		get
		{
			return _invoiceNotes;
		}
		set
		{
			_invoiceNotes = value;
			showNotes = false;
			Task tmp = Focus("btnAddInvoice");
		}
	}

	private int defaultSiteId;
	private string defaultSiteName;
	private string defaultSupplierName;
	private int defaultPaymentTypeId;
	private string defaultPaymentTypeName;

	private Company[] companies;
	private Site[] sites;
	private Supplier[] suppliers;
	private PaymentType[] paymentTypes;
	private InvoiceView[] invoiceViews;
	private InvoiceHeading[] invoiceHeadings;
	private ViewInvoiceGroup[] viewInvoiceGroups;
	private Period[] periods;
	private ViewPeriodYears[] viewPeriodYears;


	Company companyObj = new Company();
	Invoice invoiceObj = new Invoice();
	Site siteObj = new Site();
	Supplier supplierObj = new Supplier();
	PaymentType paymentTypeObj = new PaymentType();
	InvoiceView invoiceViewObj = new InvoiceView();
	InvoiceHeading invoiceHeadingObj = new InvoiceHeading();
	ViewPeriodYears viewPeriodYearsObj = new ViewPeriodYears();

	public void refKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("description");
		}
	}
	public void descKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("heading");
		}
	}
	public void grossKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("vatAmount");
		}
	}
	public void vatKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("netAmount");
		}
	}

	public void netKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("btnAddInvoice");
		}
	}

	public void suppKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("reference");
		}
	}
	public void dateKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("site");
		}
	}
	public void siteKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("supplier");
		}
	}
	public void headingKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("paymentType");
		}
	}
	public void payKeyHandler(string keyPressed)
	{
		if (keyPressed == "Enter")
		{
			Task tmp = Focus("grossAmount");
		}
	}
	public async Task Focus(string elementId)
	{
		await JSRuntime.InvokeVoidAsync("functionLibrary.focusElement", elementId);
	}

	public string informationModalReply
	{
		get
		{
			return null;
		}

		set
		{
			showInformationModal = false;
		}

	}

	private int viewPeriodYearsSelected;
	private InvoiceView[] getHeading(int headingId, int paymentType)
	{
		InvoiceView[] groupInvoices;
		groupInvoices = Array.FindAll(invoiceViews, f => (f.InvoiceHeadingId == headingId) && (f.InvoicePaymentId == paymentType));

		return groupInvoices;

	}
	private int invoiceHeadingSelected;

	private string _invoiceHeadingSelectedName;
	private string invoiceHeadingSelectedName
	{
		get
		{
			return _invoiceHeadingSelectedName;
		}

		set
		{
			InvoiceHeading tempInvoiceHeading = Array.Find<InvoiceHeading>(invoiceHeadings, f => f.Description == value);
			if (tempInvoiceHeading != null)
			{
				invoiceHeadingSelected = tempInvoiceHeading.Id;
			}
			else
			{
				InvoiceHeading invoiceHeading = new InvoiceHeading();
				invoiceHeading.Description = value;

				Task temp = addNewInvoiceHeading(invoiceHeading);
			}

			_invoiceHeadingSelectedName = value;
		}
	}

	private async Task addNewInvoiceHeading(InvoiceHeading newInvoiceHeading)
	{
		await Http.PostJsonAsync<InvoiceHeading>("/api/InvoiceHeadings", newInvoiceHeading);
		invoiceHeadings = await Http.GetJsonAsync<InvoiceHeading[]>("/api/InvoiceHeadings");
		this.StateHasChanged();
	}

	private int siteSelected;
	private string paymentTypeSelected;

	private string _reconPaymentTypeSelected;
	private string reconPaymentTypeSelected
	{
		get
		{
			return _reconPaymentTypeSelected;
		}

		set
		{
			_reconPaymentTypeSelected = value;
			if (value == "ALL")
			{
				Task tmp = GetAllViewGroups();
			}
			else
			{
				Task tmp = GetViewGroup(int.Parse(value));
			}
		}
	}

	private string paymentTypeSelectedName;

	private int supplierSelected;

	private string _supplierSelectedName;
	private string supplierSelectedName
	{
		get
		{
			return _supplierSelectedName;
		}

		set
		{
			Supplier tempSupplier = Array.Find<Supplier>(suppliers, f => f.Name == value);
			if (tempSupplier != null)
			{
				supplierSelected = tempSupplier.Id;
			}
			else
			{
				Task tmp = addNewSupplier(value);
			}
			_supplierSelectedName = value;
		}
	}

	private async Task addNewSupplier(String newSupplierName)
	{
		Supplier newSupplier = new Supplier();
		newSupplier.Name = newSupplierName;

		await Http.SendJsonAsync(HttpMethod.Post, "/api/Suppliers/", newSupplier);
		suppliers = await Http.GetJsonAsync<Supplier[]>("/api/Suppliers/");

		// Get the new suppliers ID to store locally
		newSupplier = Array.Find<Supplier>(suppliers, f => f.Name == newSupplierName);
		supplierSelected = newSupplier.Id;

		this.StateHasChanged();
	}

	public string _siteSelectedName;

	public string siteSelectedName
	{
		get
		{
			return _siteSelectedName;
		}

		set
		{
			_siteSelectedName = value;

			Site site = Array.Find<Site>(sites, p => p.SiteName == value);
			siteSelected = site.Id;
		}
	}

	public decimal _VatAmount = 0;
	public decimal VatAmount
	{
		get
		{
			return _VatAmount;
		}

		set
		{
			_VatAmount = value;
		}
	}

	public decimal _GrossAmount = 0;
	public decimal GrossAmount
	{
		get
		{
			return _GrossAmount;
		}

		set
		{
			_GrossAmount = value;
		}
	}

	public decimal _NetAmount = 0;
	public decimal NetAmount
	{
		get
		{
			return _NetAmount;
		}
		set
		{
			if (_VatAmount == 0)
			{
				if (_GrossAmount != value)
				{
					VatAmount = value - _GrossAmount;
				}
			}
			else
			{
				if (_GrossAmount == 0)
				{
					GrossAmount = value - _VatAmount;
				}
			}
			_NetAmount = value;
		}

	}


	private void NetAmountKeyPress()
	{
		if (GrossAmount == 0)
		{
			if (VatAmount != 0 && NetAmount != 0)
			{
				GrossAmount = NetAmount - VatAmount;
			}
		}
		else
		{
			NetAmount = GrossAmount + VatAmount;
		}
	}

	private void clearInputValues()
	{
		invoiceObj = new Invoice(companyId);
		invoiceObj.Date = DateTime.Today;
		supplierSelectedName = suppliers[0].Name;
		siteSelectedName = sites[0].SiteName;
		paymentTypeSelected = paymentTypes[0].Description;
		invoiceHeadingSelectedName = invoiceHeadings[0].Description;
		GrossAmount = 0;
		VatAmount = 0;
		NetAmount = 0;
		invoiceObj.InvoiceReference = "";
		invoiceObj.Description = "";
	}

	protected override async Task OnInitializedAsync()
	{
		companyId = AppData.CompanyId;
		viewPeriodYears = await Http.GetJsonAsync<ViewPeriodYears[]>("api/ViewPeriodYears");
		viewPeriodYearsSelected = int.Parse(currentPeriodYear);

		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/Year/" + viewPeriodYearsSelected + "/" + companyId);

		companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		sites = await Http.GetJsonAsync<Site[]>("api/Sites/Company/" + companyId);
		suppliers = await Http.GetJsonAsync<Supplier[]>("api/Suppliers");
		invoiceHeadings = await Http.GetJsonAsync<InvoiceHeading[]>("api/InvoiceHeadings");
		periods = await Http.GetJsonAsync<Period[]>("api/Periods/Company/" + companyId + "/Year/" + currentPeriodYear);

		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("api/PaymentTypes");
		if (paymentTypes.Length == 0)
		{
			PaymentType paymentType = new PaymentType();
			paymentType.Id = 0;
			paymentType.Description = "No Payment Types";
			paymentType.Type = "";

			paymentTypes = new PaymentType[1];
			paymentTypes[0] = paymentType;
		}

		try
		{
			defaultPaymentTypeId = Array.Find(paymentTypes, f => f.Type == "DD").Id;
		}
		catch (NullReferenceException ex)
		{
			defaultPaymentTypeId = 0;
		}
		catch (Exception ex)
		{
			defaultPaymentTypeId = 0;
		}
		await GetViewGroup(defaultPaymentTypeId);

		if (sites.Length == 0)
		{
			Site site = new Site();
			site.Id = 0;
			site.SiteName = "No Sites";
			sites = new Site[1];
			sites[0] = site;
		}
		defaultSiteId = sites[0].Id;
		defaultSiteName = sites[0].SiteName;


		defaultPaymentTypeName = paymentTypes[0].Description;

		invoiceObj.Date = DateTime.Today;

		siteSelected = defaultSiteId;
		siteSelectedName = defaultSiteName;
		paymentTypeSelected = defaultPaymentTypeId.ToString();

		if (invoiceHeadings.Length == 0)
		{
			InvoiceHeading invoiceHeading = new InvoiceHeading();
			invoiceHeading.Id = 0;
			invoiceHeading.Description = "No Headings";
			invoiceHeadings = new InvoiceHeading[1];
			invoiceHeadings[0] = invoiceHeading;
		}
		invoiceHeadingSelected = invoiceHeadings[0].Id;
		invoiceHeadingSelectedName = invoiceHeadings[0].Description;

		Period tmp = getCurrentPeriod();
		await Focus("date");
	}

	void AddNewInvoice()
	{
		if (!validateNewInvoice())
		{
			showInformationModal = true;
		}
		else
		{

			try
			{
				invoiceObj.SiteID = siteSelected;
			}
			catch (Exception ex)
			{
				invoiceObj.SiteID = defaultSiteId;
			}

			try
			{
				invoiceObj.PaymentTypeID = int.Parse(paymentTypeSelected);
			}
			catch (Exception ex)
			{
				invoiceObj.PaymentTypeID = defaultPaymentTypeId;
			}

			invoiceObj.Paid = !GetPaymentType(invoiceObj.PaymentTypeID).ReconcileFlag;

			invoiceObj.SupplierID = supplierSelected;
			invoiceObj.GrossAmount = GrossAmount;
			invoiceObj.VATAmount = VatAmount;
			invoiceObj.NetAmount = NetAmount;
			invoiceObj.EditDate = DateTime.Now;

			invoiceObj.Heading = invoiceHeadingSelected;

			Period invoicePeriod = getPeriod(invoiceObj.Date);
			invoiceObj.PeriodNo = invoicePeriod.PeriodKey;
			invoiceObj.PeriodId = invoicePeriod.PeriodId;
			invoiceObj.Notes = invoiceNotes;
			invoiceObj.CompanyID = companyId;

			Task d = PostInvoice();
		}

	}

	private PaymentType GetPaymentType(int paymentType)
	{
		return Array.Find(paymentTypes, f => f.Id == paymentType);
	}

	private bool validateNewInvoice()
	{
		bool isValid = true;

		if (supplierSelectedName == null)
		{
			isValid = false;
		}

		if (GrossAmount == 0)
		{
			isValid = false;
		}

		if (NetAmount == 0)
		{
			isValid = false;
		}

		if (invoiceObj.Description == null)
		{
			isValid = false;
		}
		return isValid;
	}

	private Period getCurrentPeriod()
	{
		return getPeriod(DateTime.Now);
	}

	private Period getPeriod(DateTime inDateTime)
	{
		Period period = Array.Find<Period>(periods, f => DateTime.Compare(inDateTime, f.StartDate) >= 0 && DateTime.Compare(inDateTime, f.EndDate) <= 0);
		return period;
	}

	protected async Task PostInvoice()
	{
		if (updateFlag)
		{
			await Http.SendJsonAsync(HttpMethod.Put, "/api/Invoices/" + invoiceObj.ID, invoiceObj);
		}
		else
		{
			invoiceObj.CreatedDate = DateTime.Now;
			try
			{
				await Http.SendJsonAsync(HttpMethod.Post, "/api/Invoices/", invoiceObj);
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine("Error: " + ex.Message);

			}
		}
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/Year/" + viewPeriodYearsSelected + "/" + companyId);
		clearInputValues();
		this.StateHasChanged();

	}

	private async Task GetViewGroup(int paymentType)
	{
		viewInvoiceGroups = await Http.GetJsonAsync<ViewInvoiceGroup[]>("/api/ViewInvoiceGroups/PayType/" + paymentType + "/" + companyId);
		this.StateHasChanged();
	}

	private async Task GetAllViewGroups()
	{
		viewInvoiceGroups = await Http.GetJsonAsync<ViewInvoiceGroup[]>("/api/ViewInvoiceGroups/Company/" + companyId);
		this.StateHasChanged();
	}

	private void AddInvoiceNotes()
	{
		invoiceNotes = invoiceObj.Notes;
		showNotes = true;
		StateHasChanged();
	}
	public void updateInvoiceNotes(string newNotes)
	{
		invoiceNotes = newNotes;
	}

	// Edit Method
	private void EditInvoice(InvoiceView invoiceView)
	{
		invoiceObj = new Invoice(companyId);

		invoiceObj.ID = invoiceView.InvoiceId;
		invoiceObj.InvoiceReference = invoiceView.InvoiceReference;
		invoiceObj.Description = invoiceView.InvoiceDescription;
		invoiceObj.GrossAmount = Math.Round(invoiceView.InvoiceGross, 2);
		invoiceObj.VATAmount = Math.Round(invoiceView.InvoiceVAT, 2);
		invoiceObj.NetAmount = Math.Round(invoiceView.InvoiceNet, 2);
		invoiceObj.PaymentTypeID = invoiceView.InvoicePaymentId;
		invoiceObj.SupplierID = invoiceView.InvoiceSupplierId;
		invoiceObj.SiteID = invoiceView.InvoiceSiteId;
		invoiceObj.Notes = invoiceView.InvoiceNotes;
		invoiceObj.Date = invoiceView.InvoiceDate;
		invoiceObj.CreatedDate = invoiceView.InvoiceCreatedDate;

		updateFlag = true;
		Supplier supplier = Array.Find<Supplier>(suppliers, p => p.Id == invoiceObj.SupplierID);
		Site site = Array.Find<Site>(sites, p => p.Id == invoiceObj.SiteID);

		siteSelectedName = site.SiteName;
		supplierSelectedName = supplier.Name;
		GrossAmount = invoiceObj.GrossAmount;
		VatAmount = invoiceObj.VATAmount;
		NetAmount = invoiceObj.NetAmount;

		invoiceNotes = "init";
		this.StateHasChanged();
	}

	// Delete Method
	protected async Task DeleteInvoice(InvoiceView invoiceView)
	{

		await Http.DeleteAsync("/api/Invoices/" + invoiceView.InvoiceId);

		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/Year/" + viewPeriodYearsSelected + "/" + companyId);
	}

}