@page "/Invoices"
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http
@using Microsoft.Extensions.Logging
<h3>Invoices</h3>

<form>
	<table class="form-group">
		<tr>
			<td style="width:150px">
				<label for="Invoice Date" class="control-label">Invoice Date</label>
			</td>
			<td>
				<label for="Site" class="control-label">Site</label>
			</td>
			<td>
				<label for="Supplier" class="control-label">Supplier</label>
			</td>
			<td>
				<label for="Reference" class="control-label">Reference</label>
			</td>
			<td>
				<label for="Description" class="control-label">Description</label>
			</td>
			<td>
				<label for="PaymentType" class="control-label">Pay Type</label>
			</td>
			<td class="amount">
				<label for="Gross Amount" class="control-label">Gross Amount</label>
			</td>
			<td class="amount">
				<label for="Vat Amount" class="control-label">VAT Amount</label>
			</td>
			<td class="amount">
				<label for="Net Amount" class="control-label">Net Amount</label>
			</td>
		</tr>
		<tr>
			<td>
				<input type="date" class="form-control" @bind="invoiceObj.Date" />
			</td>

			<td style="width:250px">
				@if (sites != null)
				{
					<EditForm Model="@siteObj">
						<InputSelect id="Site" @bind-Value="siteSelected" class="form-control">
							@foreach (var site in sites)
								{
								<option value="@site.Id">@site.SiteName</option>
								}
						</InputSelect>
					</EditForm>
				}


			</td>

			<td style="width:200px">
				@if (suppliers != null)
				{
					<EditForm Model="@supplierObj">
						<InputSelect id="Supplier" @bind-Value="supplierSelected" class="form-control">
							@foreach (var supplier in suppliers)
								{
								<option value="@supplier.Id">@supplier.Name</option>
								}
						</InputSelect>
					</EditForm>
				}
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.InvoiceReference" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.Description" style="width: 300px" />
			</td>
			<td>
				@if (paymentTypes != null)
				{
					<EditForm Model="@paymentTypeObj">
						<InputSelect id="Category" @bind-Value="paymentTypeSelected" class="form-control"  >
							@foreach (var paymentType in paymentTypes)
								{
								<option value="@paymentType.Id">@paymentType.Description</option>
								}
						</InputSelect>
					</EditForm>
				}
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.GrossAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.VATAmount" />
			</td>
			<td>
				<input type="text" class="form-control" @bind="invoiceObj.NetAmount" />
			</td>
		</tr>
		<tr>
			<td>
				<button type="submit" class="btn-primary" @onclick="AddNewInvoice">New</button>
			</td>
		</tr>
	</table>
</form>
@if (invoiceViews == null)
{
	<p><em>Loading....</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Date</th>
				<th>Site</th>
				<th>Supplier</th>
				<th>Reference</th>
				<th>Description</th>
				<th>Pay Type</th>
				<th>Gross</th>
				<th>VAT</th>
				<th>Net</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var invoiceView in invoiceViews)
			{
				<tr>
					<td>@invoiceView.InvoiceId</td>
					<td>@invoiceView.InvoiceDate.ToShortDateString()</td>
					<td>@invoiceView.SiteName</td>
					<td>@invoiceView.SupplierName</td>
					<td>@invoiceView.InvoiceReference</td>
					<td>@invoiceView.InvoiceDescription</td>
					<td>@invoiceView.InvoicePaymentDescription</td>
					<td>@invoiceView.InvoiceGross</td>
					<td>@invoiceView.InvoiceVAT</td>
					<td>@invoiceView.InvoiceNet</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private string siteSelected;
	private string supplierSelected;
	private string paymentTypeSelected;

	private int defaultSiteId;
	private int defaultSupplierId;
	private int defaultPaymentTypeId;

	private Company[] companies;
	private Site[] sites;
	private Invoice[] invoices;
	private Supplier[] suppliers;
	private PaymentType[] paymentTypes;
	private InvoiceView[] invoiceViews;

	Company companyObj = new Company();
	Invoice invoiceObj = new Invoice();
	Site siteObj = new Site();
	Supplier supplierObj = new Supplier();
	PaymentType paymentTypeObj = new PaymentType();
	InvoiceView invoiceViewObj = new InvoiceView();

	string ids = "0";
	bool showAddrow = false;

	bool loadFailed;

	protected override async Task OnInitializedAsync()
	{
		ids = "0";
		companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		sites = await Http.GetJsonAsync<Site[]>("api/Sites");
		suppliers = await Http.GetJsonAsync<Supplier[]>("api/Suppliers");
		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("api/PaymentTypes");
		invoiceViews = await Http.GetJsonAsync<InvoiceView[]>("/api/InvoiceViews/");

		invoiceObj.Date = DateTime.Today;

		defaultSiteId = sites[0].Id;
		defaultSupplierId = suppliers[0].Id;
		defaultPaymentTypeId = paymentTypes[0].Id;

		siteSelected = defaultSiteId.ToString();
		supplierSelected = defaultSupplierId.ToString();
		paymentTypeSelected = defaultPaymentTypeId.ToString();
	}



	void AddNewInvoice()
	{
		try
		{
			invoiceObj.SiteID = int.Parse(siteSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SiteID = defaultSiteId;
		}

		try
		{
			invoiceObj.SupplierID = int.Parse(supplierSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.SupplierID = defaultSupplierId;
		}

		try
		{
			invoiceObj.PaymentTypeID = int.Parse(paymentTypeSelected);
		}
		catch (Exception ex)
		{
			invoiceObj.PaymentTypeID = defaultPaymentTypeId;
		}

		Task x = PostInvoice();
	}

	void PostNewCustomer()
	{
		ids = "0";
		showAddrow = true;
		companyObj = new Company();
	}

	protected async Task PostInvoice()
	{
		await Http.SendJsonAsync(HttpMethod.Post, "/api/Invoices/", invoiceObj);
		invoices = await Http.GetJsonAsync<Invoice[]>("/api/Invoices");
	}

	// Add New Customer Details Method
	protected async Task AddCustomer()
	{
		if (ids == "0")

		{
			await Http.SendJsonAsync(HttpMethod.Post, "/api/Companies/", companyObj);
			companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		}
		else
		{
			await Http.SendJsonAsync(HttpMethod.Put, "/api/Companies/" + companyObj.Id, companyObj);
			companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
		}

		showAddrow = false;
	}
	// Edit Method
	protected async Task EditCustomer(string CustomerID)
	{
		showAddrow = true;

		ids = "1";
		//try
		//{
		loadFailed = false;
		ids = CustomerID.ToString();
		companyObj = await Http.GetJsonAsync<Company>("/api/Companies/" + CustomerID);

		string s = companyObj.Id.ToString();

		showAddrow = true;

		//    }
		//catch (Exception ex)
		//{
		//    loadFailed = true;
		//    Logger.LogWarning(ex, "Failed to load product {ProductId}", CustomerID);
		//}
	}
	// Delte Method
	protected async Task DeleteCustomer(string CustomerID)
	{
		showAddrow = false;

		ids = CustomerID.ToString();
		await Http.DeleteAsync("/api/Companies/" + CustomerID);

		companies = await Http.GetJsonAsync<Company[]>("/api/Companies/");
	}
}