@page "/PaymentTypes"
@using RetailGInvoices.Data
@using System.Net.Http
@inject HttpClient Http

@if (showAreYouSure)
{
	<AreYouSure showModal="true" @bind-reply="@areYouSure" />
}
<EditForm Model="@newPaymentTypeObj">
	<table class="table-borderless">
		<thead>
			<tr>
				<td>
					Short Description
				</td>
				<td>
					Long Description
				</td>
				<td>
					Card Issuer
				</td>
				<td>
					Card Number
				</td>
				<td>
					Reconcile
				</td>
				<td>
				</td>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<input @bind="newPaymentTypeObj.Type" />
				</td>
				<td>
					<input @bind="newPaymentTypeObj.Description" />
				</td>
				<td>
					<input @bind="newPaymentTypeObj.CardIssuer" />
				</td>
				<td>
					<input @bind="newPaymentTypeObj.CardNumber" />
				</td>
				<td>
					<input type="checkbox" @bind="newPaymentTypeObj.ReconcileFlag" />
				</td>
				<td>
					<button type="submit" class="btn btn-info" @onclick="x => addNewPaymentType()">Add</button>
				</td>
			</tr>
		</tbody>
	</table>
</EditForm>
@if (paymentTypes == null)
{
	<p>Loading Payment Types...</p>
}
else
{
	<button class="btn btn-sm btn-danger" title="Toggle Edit Mode" @onclick="@((x) => ToggleEdit())">Toggle Edit Mode</button>
	<Table TableItem="PaymentType" Items="paymentTypes" @ref="Table" PageSize="20" ColumnReorder="true" SelectionType="SelectionType.Single" RowClickAction="RowClick">
		<Column TableItem="PaymentType" Title="Short Desc" Field="@(x => x.Type)" Sortable="true" Width="10%" DefaultSortColumn="true">
			<EditTemplate>
				<input type="text" @bind-value="@context.Type" class="form-control form-control-sm" />
			</EditTemplate>
		</Column>
		<Column TableItem="PaymentType" Title="Long Desc" Field="@(x => x.Description)" Width="10%">
			<EditTemplate>
				<input type="text" @bind-value="@context.Description" class="form-control form-control-sm" />
			</EditTemplate>
		</Column>
		<Column TableItem="PaymentType" Title="Card Issuer" Field="@(x => x.CardIssuer)" Width="10%">
			<EditTemplate>
				<input type="text" @bind-value="@context.CardIssuer" class="form-control form-control-sm" />
			</EditTemplate>
		</Column>
		<Column TableItem="PaymentType" Title="Card Number" Field="@(x => x.CardNumber)" Width="10%">
			<EditTemplate>
				<input type="text" @bind-value="@context.CardNumber" class="form-control form-control-sm" />
			</EditTemplate>
		</Column>
		<Column TableItem="PaymentType" Title="Reconcile" Field="@(x => x.ReconcileFlag)" Width="10%">
			<Template>
				<input type="checkbox" @bind-value="@context.ReconcileFlag" checked="@context.ReconcileFlag" disabled />
			</Template>
			<EditTemplate>
				<input type="checkbox" @bind-value="@context.ReconcileFlag" checked="@context.ReconcileFlag" class="form-control form-control-sm" />
			</EditTemplate>
		</Column>
	</Table>
}

@if (showButtons)
{
	<table class="table-borderless">
		<tr>
			<td style="width: 100px">
				<button class="btn-info" @onclick="saveChanges">Save Changes</button>
			</td>
			<td style="width: 100px">
				<button class="btn btn-danger" @onclick="deletePaymentType">Delete</button>
			</td>
		</tr>
	</table>

}
@code {
	PaymentType newPaymentTypeObj = new PaymentType();
	PaymentType paymentTypeObj = new PaymentType();

	PaymentType[] paymentTypes;
	private ITable<PaymentType> Table;
	private bool showButtons = false;

	private string _areYouSure = "";
	public string areYouSure
	{
		get
		{
			return _areYouSure;
		}
		set
		{
			_areYouSure = value;
			if (value != "")
			{
				if (value == "YES")
				{
					Task tmp = DeleteRecord(paymentTypeObj.Id);
				}
				showAreYouSure = false;
			}
		}
	}
	private bool showAreYouSure = false;
	private void showModalScreen()
	{
		showAreYouSure = true;
	}

	private void addNewPaymentType()
	{
		Task tmp = PostNew(newPaymentTypeObj);
		newPaymentTypeObj = new PaymentType();
	}

	private void ToggleEdit()
	{
		Table.ToggleEditMode();

		if (Table.IsEditMode)
		{
			showButtons = true;
		}
		else
		{
			showButtons = false;
		}
	}

	private void RowClick(PaymentType paymentTypeSelected)
	{
		System.Diagnostics.Debug.WriteLine("Entered RowClick");

		paymentTypeObj = paymentTypeSelected;
	}

	private void saveChanges()
	{
		Task tmp = PutChanges(paymentTypeObj);
		paymentTypeObj = new PaymentType();
		ToggleEdit();
	}

	private void deletePaymentType()
	{
		showAreYouSure = true;
	}

	protected override async Task OnInitializedAsync()
	{
		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("/api/PaymentTypes");
	}

	private async Task PutChanges(PaymentType paymentType)
	{
		await Http.SendJsonAsync(HttpMethod.Put, "/api/PaymentTypes/" + paymentType.Id, paymentType);
	}
	private async Task PostNew(PaymentType paymentType)
	{
		await Http.PostJsonAsync<PaymentType>("/api/PaymentTypes", paymentType);
		await refreshDisplay();
	}

	private async Task DeleteRecord(int id)
	{
		await Http.DeleteAsync("/api/PaymentTypes/" + id.ToString());
		await refreshDisplay();
	}

	private async Task refreshDisplay()
	{
		paymentTypes = await Http.GetJsonAsync<PaymentType[]>("/api/PaymentTypes");
		StateHasChanged();
	}
}
