@inherits RetailGInvoices.Pages.Invoices

@if (showModal)
{
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Invoice Notes</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<textarea class="form-control" @bind="notes" />
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-primary" @onclick="() => SaveChanges()">Save changes</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
			</div>
		</div>
	</div>
</div>
}


@if (ShowBackdrop)
{
	<div class="modal-backdrop fade show"></div>
}


@code {
	private string _notes;

	[Parameter]
	public string notes
	{
		get => _notes;

		set
		{
			if (_notes == value) return;
			_notes = value;
			NotesChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<string> NotesChanged { get; set; }

	private bool _showModal;
	[Parameter]
	public bool showModal {
		get
		{
			return _showModal;
		}
		set
		{
			_showModal = value;
			if (value)
			{
				ModalDisplay = "block;";
				ModalClass = "Show";
				ShowBackdrop = true;
			}
			else
			{
				ModalDisplay = "none";
				ModalClass = "";
				ShowBackdrop = false;
			}
		}
	}

	public Guid Guid = Guid.NewGuid();
	public string ModalDisplay = "none;";
	public string ModalClass = "";
	public bool ShowBackdrop = false;

	public void Close()
	{
		showModal = false;
	}

	public void SaveChanges()
	{
		showModal = false;
	}
}